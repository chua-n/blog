<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo-Next + GitHub + Gitee 搭建个人博客</title>
    <url>/blog/2021/01/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>采用博客搭建框架 Hexo(v5.3.0)、选用博客主题 Next(v7.8.0)、利用 GitHub 的 Pages 功能作为后端服务、使用 Gitee 的 pages 功能作为博客图床，本文可以免费搭建出一个简洁大方的个人博客。此外，若想更进一步，希望通过个人定制化域名访问博客，可以选择在华为云/阿里云等域名服务商处购买个人域名后，进行简单的映射配置即可。</p>
<blockquote>
<p>注：Hexo 博客采用 markdown 语法进行文章内容书写。</p>
</blockquote>
<span id="more"></span>
<h2 id="1-基础设施"><a href="#1-基础设施" class="headerlink" title="1. 基础设施"></a>1. 基础设施</h2><p>整个过程所需依赖工具如下（均免费）：</p>
<ul>
<li>Node.js (版本：最低&gt;=10.13, 建议&gt;=12.0)</li>
<li>npm</li>
<li>Git</li>
<li>GitHub 账户</li>
<li>Gitee 账户</li>
</ul>
<h3 id="1-1-Node-js"><a href="#1-1-Node-js" class="headerlink" title="1.1. Node.js"></a>1.1. Node.js</h3><p>Hexo 框架基于 Node.js，Next 主题是基于 Hexo 的优秀第三方主题，因此要安装 Hexo 首先需安装 Node.js。所谓 Node.js，它不是一门编程语言，而是编程语言 JavaScript（简称 js，运行在浏览器中的编程语言）的运行时环境，好比 JRE 之于 Java。有了 Node.js，js 的代码不必非要在 V8 JavaScript 引擎（Google Chrome 的内核）中运行了，可以通过这个 nodejs 来解析执行，通俗地讲，nodejs 对 chrome 内核进行了封装，因此可以脱离浏览器执行 js 代码。</p>
<p>windows 系统在 <a href="https://nodejs.org/zh-cn/">nodejs 官网</a>下载安装包，linux 系统这里以 ubuntu 为例，使用命令 <code>sudo apt install nodejs</code> 即可安装（不过版本为 v10.19.0，勉强满足要求）。</p>
<h3 id="1-2-npm"><a href="#1-2-npm" class="headerlink" title="1.2. npm"></a>1.2. npm</h3><p>npm(node package management)，即 nodejs 的包管理器（nodejs 通常也称作 node），好比 pip 之于 python 吧。</p>
<p>如果你在上步是通过 windows 安装的 nodejs，那么 npm 工具已经随 nodejs 安装好了，不必再进行操作；如果你是 linux 下进行的安装，再执行额外的命令<code>sudo apt install npm</code>吧，我这里自动安装的版本是 v6.14.4。</p>
<h3 id="1-3-Git"><a href="#1-3-Git" class="headerlink" title="1.3. Git"></a>1.3. Git</h3><p>安装版本控制工具 Git，是一个编程界几乎无人不知无人不晓的工具了，安装流程咨询搜索引擎或参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496">廖雪峰的这一页教程</a>即可，这里不再赘述，不过提醒你配置好在 Git 中的姓名和邮箱。</p>
<h3 id="1-4-GitHub-和-Gitee-账户"><a href="#1-4-GitHub-和-Gitee-账户" class="headerlink" title="1.4. GitHub 和 Gitee 账户"></a>1.4. GitHub 和 Gitee 账户</h3><p>两者名称中打头的“Git”即缘自上一步提及的 Git，GitHub 和 Gitee 是用 Git 管理你的代码的云端存储仓库，Gitee 其实是 GitHub 的国内山寨版，风格、界面、操作几乎一模一样。</p>
<p>GitHub 和 Gitee 都提供免费的 pages 服务，所谓的 <a href="https://www.baidu.com/link?url=els0W6Bd92GOMdr_r84LrqCpKPR10Iy_jiKgK1SPYhO5zBOOffTngA99ocKeFqOt_buq2pOAN9XbUUcIkgROBSsFwM_dThgGt6HE6-m1UCDhQ3taP2udYnjBoeivseBP&amp;wd=&amp;eqid=a1a54f2a0000076f000000035ff6c65a">pages</a> 是一个免费的静态网页托管服务，可以用来托管博客、项目官网等静态网页，本文所谈的博客搭建正是基于 GitHub 的 pages。简而言之，你用这个 pages 服务搭好你的博客内容后，你就拥有了一个博客主页：username.github.io 或 username.gitee.io，其中 username 是注册的 GitHub 或 Gitee 账户的用户名，比如笔者的博客网址就是 <a href="https://chua-n.github.io/">chua-n.github.io</a>。至于为什么不用 Gitee 的 pages，只是因为它现在不再支持免费的自定义域名，而我希望使用自定义域名来访问我的博客，比如在浏览器输入地址 www.chua-n.com ，也可以进入我的博客，和 chua-n.github.io 是一模一样的。</p>
<p>那为什么用了 GitHub 还要使用 Gitee 呢？原因在于 GitHub 毕竟是国外的产品，服务器在中国境外，作为全世界 IT 工程师的核心交流社区虽未被墙，但在其中访问图片资源的时候效率极其低下，博客中的图片经常加载不出来，因此国内网络上有很多寻找各种“图床”（一个在网络上存储你的图片的地方，以便你在博客中引用该图片时能够正常显示，可理解为公开的网盘吧）的帖子，这些帖子最常提到的图床有七牛云（免费 10G 空间）、腾讯云（不了解）、微博相册（不了解）等等，它们往往有空间有限、面临收费或正在收费、每日上/下载流量有限等问题。因此笔者脑门一激灵，想着 GitHub 和 Gitee 均作为重要的开源免费社区，既然图片能免费存在 GitHub 上，只是影响博客加载效率，何不单独将图片存储在 Gitee 中再引用呢？于是又用到了 Gitee。</p>
<p>说了这么多，其实这一步实际去做的就两件事，分别注册一个 <a href="https://github.com/">GitHub</a> 和 <a href="https://gitee.com/">Gitee</a> 账户即可。</p>
<h2 id="2-搭建博客框架"><a href="#2-搭建博客框架" class="headerlink" title="2. 搭建博客框架"></a>2. 搭建博客框架</h2><p>以下内容涉及到命令行的，Windows 下均建议在 git bash 中运行，不建议 cmd。</p>
<h3 id="2-1-安装-Hexo-并创建博客目录"><a href="#2-1-安装-Hexo-并创建博客目录" class="headerlink" title="2.1. 安装 Hexo 并创建博客目录"></a>2.1. 安装 Hexo 并创建博客目录</h3><blockquote>
<p>这一步亦可参考<a href="https://hexo.io/zh-cn/docs/setup">官网介绍</a>。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 在本地你希望的地方创建一个空文件夹，取任意名，这里命名为blog</span></span><br><span class="line"><span class="built_in">mkdir</span> blog</span><br><span class="line"><span class="comment"># 使用Hexo初始化刚刚创建的博客目录</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="comment"># 进入博客目录并使用npm安装所需依赖</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>此步完成后，你的 blog 文件夹下的目录结构应该如下，其中比较重要的目录/文件已添加<code>#</code>注释。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blog/</span><br><span class="line">├── _config.landscape.yml <span class="comment"># hexo默认主题landscape的配置文件：一般不需关注</span></span><br><span class="line">├── _config.yml <span class="comment"># 网站（博客）的配置文件：可以在此配置大部分参数</span></span><br><span class="line">├── node_modules <span class="comment"># node模块文件夹：存放安装的hexo扩展</span></span><br><span class="line">│   ├── JSONStream</span><br><span class="line">│   ├── a-sync-waterfall</span><br><span class="line">│   ├── abbrev</span><br><span class="line">│   ├── accepts</span><br><span class="line">│   ├── amdefine</span><br><span class="line">│   ├── ansi-regex</span><br><span class="line">│   ├── ansi-styles</span><br><span class="line">│   ├── ...</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json <span class="comment"># 博客使用的包的信息：如hexo的版本、npm扩展的版本</span></span><br><span class="line">├── scaffolds <span class="comment"># 模板文件夹：新建相应文稿时会套用这里存储的模板</span></span><br><span class="line">│   ├── draft.md <span class="comment"># 草稿模板：文章草稿，不会发表在博客中</span></span><br><span class="line">│   ├── page.md <span class="comment"># 页面模板：创建新页面时使用，如tags/categoreis/about</span></span><br><span class="line">│   └── post.md <span class="comment"># 正式文章模板：会展示在博客中</span></span><br><span class="line">├── <span class="built_in">source</span> <span class="comment"># 资源文件夹：存储你的博客文章、图片等</span></span><br><span class="line">│   └── _posts <span class="comment"># 存放博客文章的地方</span></span><br><span class="line">│       └── hello-world.md <span class="comment"># 默认生成的第一篇博文</span></span><br><span class="line">└── themes <span class="comment"># 主题文件夹：存放你下载的各种主题，如后面要使用的next</span></span><br></pre></td></tr></table></figure>
<p>至此，博客其实已具雏形，命令行输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>即可在本地浏览器中输入网站 <a href="http://localhost:4000">http://localhost:4000</a> 浏览你的博客，由于没有自己的文章，默认只有一篇 hexo 自带的博文<code>blog/source/_posts/hello-world.md</code>，所以主页显示如下:<br><img src="https://chua-n.gitee.io/figure-bed/blog/hexo搭博客/hexo-default.jpeg" alt=""></p>
<h3 id="2-2-设置站点信息"><a href="#2-2-设置站点信息" class="headerlink" title="2.2. 设置站点信息"></a>2.2. 设置站点信息</h3><p>此时博客展示出的内容均是 Hexo 默认内容，尚未体现出个人属性，下面简单更改一些内容作为尝鲜。</p>
<p>更改博客根目录下的<code>_config.yml</code>文件，找到开头的站点配置选项如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>选项分别代表所建网站的<strong>名字、附标题、描述语句、关键词、拥有者、语言、时区</strong>，可以根据含义更改为自己需要的信息，比如我这里更改如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">这里是川！</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">合抱之木，生于毫末。</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">NaniNani</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">荒流</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>
<p>为了稍微体验一下博文的书写，再捎带更改一下 Hexo 自带的文章 hello-world.md，在文件的最后<strong>隔开一行</strong>后添加如下内容：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 我创作的内容</span></span><br><span class="line"></span><br><span class="line">暂时也没啥好写的，就体验一下<span class="strong">**代码展示**</span>吧。</span><br><span class="line"></span><br><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">import random</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">def fitPi(trialTimes: int) -&gt; float:</span></span><br><span class="line"><span class="code">    &quot;&quot;&quot;Calculate Pi by probabilistic statistics.</span></span><br><span class="line"><span class="code">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="code">    nInCircle = 0</span></span><br><span class="line"><span class="code">    for _ in range(trialTimes):</span></span><br><span class="line"><span class="code">        x = random.uniform(-1, 1)</span></span><br><span class="line"><span class="code">        y = random.uniform(-1, 1)</span></span><br><span class="line"><span class="code">        if x**2 + y**2 &lt;= 1:</span></span><br><span class="line"><span class="code">            nInCircle += 1</span></span><br><span class="line"><span class="code">    pi = 4 * nInCircle / trialTimes</span></span><br><span class="line"><span class="code">    return pi</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="code">    pi = fitPi(1000000)</span></span><br><span class="line"><span class="code">    print(pi)</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>
<p>更改完成后，重新生成博客站点静态文件并启动后台服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><img src="https://chua-n.gitee.io/figure-bed/blog/hexo搭博客/hexo-written.jpeg" alt=""></p>
<h3 id="2-3-Hexo-基本命令"><a href="#2-3-Hexo-基本命令" class="headerlink" title="2.3. Hexo 基本命令"></a>2.3. Hexo 基本命令</h3><p>上面已经用到了几条 hexo 命令，这里概括介绍玩 hexo 的 5 条常用命令，它们足够满足日常需求。如果需要更多的 Hexo 细节使用指南，可以参考<a href="https://hexo.io/zh-cn/docs/commands">官网</a>。</p>
<ul>
<li><code>hexo init [folder]</code><br>将一个文件夹 folder 初始化为 hexo 博客目录</li>
<li><code>hexo generate</code><br>根据你配置的 config 与写的 markdown 文章生成构建网站的 html 页面，此时博客目录下产生 public 文件夹，存放这些生成的内容</li>
<li><code>hexo server</code><br>将生成的博客网页挂载在本地主机 IP 的 4000 端口上，此时可在浏览器内通过 <a href="http://localhost:4000">http://localhost:4000</a> 访问你的博客</li>
<li><code>hexo deploy</code><br>将生成的网页部署到你设定的公网地址，一般就是你的 GitHub pages 地址</li>
<li><code>hexo clean</code><br>清除缓存文件(db.json)和已生成的 public 目录下的静态文件，此命令主要用在某些情况下（尤其是更换了博客主题后），你发现无论如何更改站点配置博客内容也不发生变化的时候</li>
</ul>
<h3 id="2-4-下载并开启-Next-主题"><a href="#2-4-下载并开启-Next-主题" class="headerlink" title="2.4. 下载并开启 Next 主题"></a>2.4. 下载并开启 Next 主题</h3><p>Hexo 自带的主题不好看，笔者选择使用 Next 主题。在博客路径下通过 Git 拉取 Next 主题的源代码，并放置于<code>themes/</code>目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>然后通过博客根目录下的<code>_config.yml</code>配置文件更改主题：打开配置文件，搜索并找到 theme 配置选项，差不多在 101 行的位置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"> <span class="number">98</span> <span class="comment"># Extensions</span></span><br><span class="line"> <span class="number">99</span> <span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="number">100</span> <span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">101 theme:</span> <span class="string">landscape</span></span><br></pre></td></tr></table></figure>
<p>将 Hexo 默认的 landscape 主题改为 next 即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"> <span class="number">98</span> <span class="comment"># Extensions</span></span><br><span class="line"> <span class="number">99</span> <span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="number">100</span> <span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">101 theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>此时再来预览一下 Next 主题下的你的博客：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 因为这里切换了主题，最好先clean一下缓存</span></span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p><img src="https://chua-n.gitee.io/figure-bed/blog/hexo搭博客/next.jpeg" alt=""></p>
<p>依然很丑？没关系，它已经种下了美的种子，后面会被逐步雕刻起来的，而且不会有多麻烦。</p>
<h2 id="3-部署到互联网"><a href="#3-部署到互联网" class="headerlink" title="3. 部署到互联网"></a>3. 部署到互联网</h2><p>之前的步骤已经可以在本地看到你的博客了，下面开始利用 GitHub Pages 将博客发布到互联网上，并创建 Gitee Pages 作为博客图床。</p>
<h3 id="3-1-创建-GitHub-Pages"><a href="#3-1-创建-GitHub-Pages" class="headerlink" title="3.1. 创建 GitHub Pages"></a>3.1. 创建 GitHub Pages</h3><p>网上教程很多，可自己求助搜索引擎（或参考<a href="https://pages.github.com/">官网介绍</a>），同样不多费口舌，只是强调一番：若只是创建一个 pages 服务，仓库的名字虽然可以是任意的，但此时此刻，还是建议你最好将仓库的名字命名为 <em>username.github.io</em> ，除非你明确知道不这么做意味着什么。</p>
<p>总而言之，于我而言，因为我的 GitHub 账户名为 chua-n，这一步我创建了一个<a href="https://github.com/chua-n/chua-n.github.io">名为 chua-n.github.io 的仓库</a>，至于有没有把这个仓库下载到本地倒无甚所谓。</p>
<h3 id="3-2-创建-Gitee-Pages"><a href="#3-2-创建-Gitee-Pages" class="headerlink" title="3.2. 创建 Gitee Pages"></a>3.2. 创建 Gitee Pages</h3><p>操作同上，只是这里不再强制你将仓库名命名为<em>username.gitee.io</em>，事实上，这里建议你不要这么做，因为这个仓库只是作为一个图床向博客提供引用权限，更建议你以类似<em>blog-images</em>的方式命名，比如<a href="https://gitee.com/chua-n/blog-images">我这样的</a>。</p>
<p>与上相反，Gitee 的这个仓库则需要将其下载到本地了，因为后边需要在本地上向上传输图片。我这里暂时将下载到本地的仓库文件夹放置到搭建好的 Hexo 博客目录下，其实放哪里无所谓，我只是为了方便管理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog <span class="comment"># 进入博客根目录</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/chua-n/blog-images.git <span class="comment"># 将Gitee仓库下载到本地</span></span><br><span class="line"><span class="comment"># 查看博客目录结构（可能你没有安装 tree 命令，可忽略这条命令手动查看）</span></span><br><span class="line">$ tree -L 1 blog/</span><br><span class="line">blog/</span><br><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml</span><br><span class="line">├── blog-images <span class="comment"># 我的Gitee仓库对应的文件夹</span></span><br><span class="line">├── db.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">└── themes</span><br><span class="line"></span><br><span class="line">6 directories, 5 files</span><br></pre></td></tr></table></figure>
<h3 id="3-3-对博客进行相应配置"><a href="#3-3-对博客进行相应配置" class="headerlink" title="3.3. 对博客进行相应配置"></a>3.3. 对博客进行相应配置</h3><blockquote>
<p>这一步也可参考<a href="https://hexo.bootcss.com/docs/one-command-deployment.html">官方文档</a>的 Git 部分。</p>
</blockquote>
<h4 id="3-3-1-配置-deploy-选项"><a href="#3-3-1-配置-deploy-选项" class="headerlink" title="3.3.1. 配置 deploy 选项"></a>3.3.1. 配置 deploy 选项</h4><p>打开根目录下的<code>_config.yml</code>配置文件，搜索并找到<code>deploy</code>选项，如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>修改为:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>repository</code> 为你的 GitHub Pages 仓库的 SSH 链接，正常只需将其中的 username 改为你的账户名即可，比如我的<code>git@github.com:chua-n/chua-n.github.io.git</code>；<code>branch</code> 选项的值一般填 <code>main</code> 或 <code>master</code>，因为我是新创建的博客，Git 已经把 git 主分支名默认为 main，但很多以前建博客的帖子会填 master，无关紧要（当然如果你明确 git 分支管理的技术，可以任意填你设定的分支名）。</p>
<h4 id="3-3-2-添加-SSH-key"><a href="#3-3-2-添加-SSH-key" class="headerlink" title="3.3.2. 添加 SSH key"></a>3.3.2. 添加 SSH key</h4><p>因为上步配置<code>deploy</code>选项时用到了 GitHub 仓库的 SSH 链接，要在本地电脑上使用连接这个链接必须给 GitHub 添加你的电脑对应的 SSH key。所谓 SSH key，是 <a href="https://baike.baidu.com/item/ssh/10407?fr=aladdin">SSH 网络传输协议</a>的密钥，SSH 连接的两端必须拥有对方的密钥才能确保“对方是对方”而不是别人，也就是你要想连接 GitHub 的远程仓库，GitHub 的服务器必须确保这个试图进行连接的操作是你发起的，而不是恶意的第三方，以保障你仓库的安全。</p>
<p>添加 SSH key 的教程亦有很多，可参见<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416">廖雪峰</a>.</p>
<blockquote>
<p>附：关于 SSH key 还可阅读<a href="http://www.findme.wang/blog/detail/id/376.html">这里的简介</a>。</p>
</blockquote>
<h4 id="3-3-3-安装部署插件"><a href="#3-3-3-安装部署插件" class="headerlink" title="3.3.3. 安装部署插件"></a>3.3.3. 安装部署插件</h4><p>在博客根目录下运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h3 id="3-4-启动"><a href="#3-4-启动" class="headerlink" title="3.4. 启动"></a>3.4. 启动</h3><p>博客根目录下使用<code>hexo deploy</code>命令，即可将本地搭好的博客一键部署到 GitHub pages 上，此时任意人通过浏览器访问你的 pages 地址，即<code>username.github.io</code>即可看到互联网上你的博客，与<code>hexo server</code>在本地的显示效果一致。</p>
<p>值得一提的是，<code>hexo deploy</code>命令执行时，Hexo 会将<code>public</code>目录下的文件和目录推送到你配置的仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p>
<h2 id="4-美化主题"><a href="#4-美化主题" class="headerlink" title="4. 美化主题"></a>4. 美化主题</h2><p>根目录和每个主题文件夹下都有一个<code>_config.yml</code>配置文件，分别管理站点信息和主题信息，为了后面的描述方便，从现在起我们定义两个概念：</p>
<ul>
<li><strong>站点配置文件</strong>：博客根目录/_config.yml</li>
<li><strong>主题配置文件</strong>：博客根目录/themes/next/_config.yml</li>
</ul>
<p>同时，修改配置文件时，不再啰里吧嗦地去说“搜索并修改###参数、大概在###行”，仅会强调修改的是哪个配置文件。</p>
<p>后面的内容比较琐碎，慢工出细活~</p>
<blockquote>
<p>附：Next 主题的<a href="http://theme-next.iissnan.com/">官方文档</a>也值得学习。</p>
</blockquote>
<h3 id="4-1-博客的基本信息"><a href="#4-1-博客的基本信息" class="headerlink" title="4.1. 博客的基本信息"></a>4.1. 博客的基本信息</h3><p>位于站点配置文件，在“2.2 节设置站点信息”处其实已有说明。</p>
<h3 id="4-2-选择-Next-样式"><a href="#4-2-选择-Next-样式" class="headerlink" title="4.2. 选择 Next 样式"></a>4.2. 选择 Next 样式</h3><p>Next 主题本身还提供了 4 种样式方案，默认为<code>muse</code>，可以通过<strong>主题配置文件</strong>修改为自己喜欢的风格，这里我选择<code>Gemini</code>，把其它选项注释掉即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-开启其他页面选项"><a href="#4-3-开启其他页面选项" class="headerlink" title="4.3. 开启其他页面选项"></a>4.3. 开启其他页面选项</h3><p>在博客的主体中，除了有主页 home，归档 archive 之外，还有一些页面可供选择，如标签 tags 页面、分类 categories 页面、自我介绍 about 页面等，可通过在<strong>主题配置文件</strong>的<code>menu</code>选项中取消相关注释开启该页面，每一行后面的<code>||</code>符号是该页面选项上对应的 logo 图标。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">    <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">    <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">    <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">    <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">    <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">    <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>
<h3 id="4-4-创建-tags-categories-about-页面"><a href="#4-4-创建-tags-categories-about-页面" class="headerlink" title="4.4. 创建 tags/categories/about 页面"></a>4.4. 创建 tags/categories/about 页面</h3><p>以 tags 页面为例，三者方式几乎一致。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>然后打开<code>source/tags/index.md</code>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line"><span class="section">date: 2021-01-08 22:02:34</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>其中 title 选项叫什么不要紧，重要的是添加一个 type 选项说明这个页面的类型是 tags/categories/about：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2021-01-08 22:02:34</span><br><span class="line"><span class="section">type: tags</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>tags 页面和 categores 页面是通过<strong>自动汇总每一篇博文中定义的标签或分类</strong>进行展示的，对于 about 页面，直接在它对应的 <code>index.md</code> 里添加自我介绍的内容即可在 about 页面进行展示。</p>
<h3 id="4-5-编辑社交链接"><a href="#4-5-编辑社交链接" class="headerlink" title="4.5. 编辑社交链接"></a>4.5. 编辑社交链接</h3><p>在<strong>主题配置文件</strong>的 social 选项中通过注释/反注释进行开启/关闭，也可自己添加其他社交链接并选择一个合适的 logo。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">    <span class="attr">GitHub:</span> <span class="string">https://github.com/chua-n</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">    <span class="attr">E-Mail:</span> <span class="string">mailto:chua_n@qq.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">    <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">    <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">    <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">    <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">    <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">    <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">    <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">    <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line">    <span class="comment"># Bilibili: https://space.bilibili.com/33035816 || fab fa-youtube</span></span><br></pre></td></tr></table></figure>
<h3 id="4-6-更改字体"><a href="#4-6-更改字体" class="headerlink" title="4.6. 更改字体"></a>4.6. 更改字体</h3><blockquote>
<p>有说可能需要修改相关 css 文件，但我这里测试的结果是不需要这么复杂，直接修改<strong>主题配置文件</strong>即可，有可能是我配置的文件在默认的字库提供范围之内吧。</p>
</blockquote>
<p>对于中文字体，我当前比较青睐“思源宋体”，因此将全局字体设置为<code>Noto Serif SC</code>，我的其他配置如下，这里的配置选项介绍建议参考<a href="http://theme-next.iissnan.com/theme-settings.html#fonts-customization">官网</a>。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开启font选项</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">https://fonts.loli.net</span> <span class="comment"># 国内谷歌字体的镜像源</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Font options:</span></span><br><span class="line">    <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">    <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">    <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">    <span class="attr">global:</span></span><br><span class="line">        <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">family:</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span></span><br><span class="line">        <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">    <span class="attr">title:</span></span><br><span class="line">        <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">family:</span></span><br><span class="line">        <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">    <span class="attr">headings:</span></span><br><span class="line">        <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">family:</span> <span class="string">Roboto</span> <span class="string">Slab</span></span><br><span class="line">        <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">    <span class="attr">posts:</span></span><br><span class="line">        <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">    <span class="attr">codes:</span></span><br><span class="line">        <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">family:</span> <span class="string">PT</span> <span class="string">Mono</span></span><br></pre></td></tr></table></figure>
<h3 id="4-7-代码块高亮"><a href="#4-7-代码块高亮" class="headerlink" title="4.7. 代码块高亮"></a>4.7. 代码块高亮</h3><p><strong>主题配置文件</strong>中的<code>codeblock</code>选项可选择高亮主题，这里选择默认的<code>normal</code>，并开启复制按钮。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">    <span class="comment"># Code Highlight theme</span></span><br><span class="line">    <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">    <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">    <span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line">    <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">    <span class="attr">copy_button:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># Show text copy result.</span></span><br><span class="line">        <span class="attr">show_result:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">        <span class="attr">style:</span></span><br></pre></td></tr></table></figure>
<h3 id="4-8-阅读进度条"><a href="#4-8-阅读进度条" class="headerlink" title="4.8. 阅读进度条"></a>4.8. 阅读进度条</h3><p><strong>主题配置文件</strong>中开启<code>reading_progress</code>选项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: top | bottom</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">    <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>
<h3 id="4-9-书签"><a href="#4-9-书签" class="headerlink" title="4.9. 书签"></a>4.9. 书签</h3><p><strong>主题配置文件</strong>中开启<code>bookmark</code>选项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bookmark Support</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">    <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">    <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">    <span class="attr">save:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>
<h3 id="4-10-字数统计、阅读时长估计"><a href="#4-10-字数统计、阅读时长估计" class="headerlink" title="4.10. 字数统计、阅读时长估计"></a>4.10. 字数统计、阅读时长估计</h3><p>安装插件<code>hexo-symbols-count-time</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>
<p><strong>站点配置文件</strong>的末尾加上配置选项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">    <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment"># 在每篇文章中显示词数</span></span><br><span class="line">    <span class="attr">time:</span> <span class="literal">true</span> <span class="comment"># 每篇文章的阅读时间估计</span></span><br><span class="line">    <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment"># 在站点底部显示全部文章的词数</span></span><br><span class="line">    <span class="attr">total_time:</span> <span class="literal">true</span> <span class="comment"># 在站点底部显示全部文章的阅读时间估计</span></span><br></pre></td></tr></table></figure>
<p><strong>主题配置文件</strong>中默认添加了相关配置选项，我这里没有对其进行改动：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">    <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="4-11-数学公式支持"><a href="#4-11-数学公式支持" class="headerlink" title="4.11. 数学公式支持"></a>4.11. 数学公式支持</h3><p>在<strong>主题配置文件</strong>中开启<code>mathjax</code>选项，并在需要启用数学公式的文章开头加入<code>mathjax: true</code>配置语句即可启动对数学公式的支持。</p>
<ul>
<li><p>主题配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">    <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">    <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">    <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">    <span class="attr">mathjax:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">        <span class="attr">mhchem:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用全面支持<code>mathjax</code>的新插件：<br>Next 支持数学公式，但其自带的渲染插件<code>hexo-renderer-marked</code>对<code>mathjax</code>的支持不全，且有时会跟 markdown 的$\LaTeX$公式语法有冲突，因此一般使用新插件<code>hexo-renderer-kramed</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：有说还需要更改<code>hexo-renderer-kramed</code>插件的 js 文件的，这里暂没有发现更改的必要，测试了一些这些帖子中所说的问题似乎已被修复。</p>
</blockquote>
</li>
<li><p>新建一篇文章进行测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在source/_posts/目录创建了test-math.md</span></span><br><span class="line">$ hexo new <span class="string">&quot;test math&quot;</span></span><br><span class="line"><span class="comment"># 查看一下该文章的初始化内容</span></span><br><span class="line">$ <span class="built_in">cat</span> <span class="built_in">source</span>/_posts/test-math.md</span><br><span class="line">---</span><br><span class="line">title: <span class="built_in">test</span> math</span><br><span class="line"><span class="built_in">date</span>: 2021-01-08 23:43:35</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>编辑 test-math.md 并添加以下内容，其中关键是要在开头的配置选项中加入<code>mathjax: true</code>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试一下数学公式的使用</span><br><span class="line">date: 2021-01-08 23:43:35</span><br><span class="line">tags: math</span><br><span class="line"><span class="section">mathjax: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 做一道题吧</span></span><br><span class="line"></span><br><span class="line">题目：请证明$3=0$。</span><br><span class="line"></span><br><span class="line">证明：</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 对于方程</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;    x^2+x+1=0\tag&#123;1&#125;</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 显然有$x \neq 0$，那么两边同除以$x$可得：</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;    x + 1 + \frac&#123;1&#125;&#123;x&#125; = 0 \tag&#123;2&#125;</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 由两式相减，即$(1)-(2)$，可得</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;    x^2-\frac&#123;1&#125;&#123;x&#125;=0 \tag&#123;3&#125;</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 上式两边同乘$x$，则有</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;    x^3 - 1 = 0 \tag&#123;4&#125;</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 故而解得$x=1$，将根$x=1$代入式$(1)$，则有$1+1+1=0$，所以</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;    3=0</span></span><br><span class="line"><span class="quote">&gt; $$</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 证明完毕。</span></span><br></pre></td></tr></table></figure>
<p>效果如下：<img src="https://chua-n.gitee.io/figure-bed/blog/hexo搭博客/test-math.png" alt=""></p>
</li>
</ul>
<h3 id="4-12-阅读量统计"><a href="#4-12-阅读量统计" class="headerlink" title="4.12. 阅读量统计"></a>4.12. 阅读量统计</h3><p>应该是 Next 主题不断更新适配的缘故，无须很多博客中提到的那么多操作，直接开启<strong>主题配置文件</strong>中的不蒜子参数即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">    <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">    <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>
<h3 id="4-13-本地搜索功能"><a href="#4-13-本地搜索功能" class="headerlink" title="4.13. 本地搜索功能"></a>4.13. 本地搜索功能</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在博客根目录下输入命令</span></span><br><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
<p>在<strong>主题配置文件</strong>中开启 <code>local_search</code> 选项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">    <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">    <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">    <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">    <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="4-14-动态背景-canvas-nest"><a href="#4-14-动态背景-canvas-nest" class="headerlink" title="4.14. 动态背景 canvas_nest"></a>4.14. 动态背景 canvas_nest</h3><p>创建文件<code>souce/_data/footer.swig</code>，添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script color=&quot;24,24,24&quot; opacity=&quot;0.5&quot; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>开启<strong>主题配置文件</strong>中的相应<code>footer</code>选项（取消注释即可）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">    <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">    <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">    <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">    <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">    <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">    <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br><span class="line">    <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">    <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">    <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">    <span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<h3 id="4-15-RSS-订阅"><a href="#4-15-RSS-订阅" class="headerlink" title="4.15. RSS 订阅"></a>4.15. RSS 订阅</h3><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p>在<strong>站点配置文件</strong>中添加如下配置参数：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RSS</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span> <span class="comment"># RSS的类型(atom/rss2)</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span> <span class="comment"># 展示文章的数量，若为0或false表示展示全部</span></span><br><span class="line">    <span class="attr">hub:</span> <span class="comment"># URL of the PubSubHubbub hubs (如果使用不到可以为空)</span></span><br><span class="line">    <span class="attr">content:</span> <span class="comment"># 为true可以在RSS中包含文章的全部内容，默认为false</span></span><br><span class="line">    <span class="attr">content_limit:</span> <span class="comment"># 摘要中使用的帖子内容的默认长度，仅在内容设置为false且未显示自定义帖子描述时才使用</span></span><br><span class="line">    <span class="attr">content_limit_delim:</span> <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="attr">order_by:</span> <span class="string">-date</span> <span class="comment"># 订阅内容的顺序，默认为-date</span></span><br></pre></td></tr></table></figure>
<p>在<strong>主题配置文件</strong>的<code>social</code>选项下添加如下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure>
<h3 id="4-16-其他"><a href="#4-16-其他" class="headerlink" title="4.16. 其他"></a>4.16. 其他</h3><p>好好阅读<strong>站点配置文件</strong>与<strong>主题配置文件</strong>中的参数设定，还有很多可以操纵的细节，不一一表述了。</p>
<h2 id="5-Gitee-图床的使用"><a href="#5-Gitee-图床的使用" class="headerlink" title="5. Gitee 图床的使用"></a>5. Gitee 图床的使用</h2><p>本质上就是把图片上传到 Gitee Pages 仓库，在文章中引用图片链接即可。比如我先在我的<code>blog-images/</code>文件夹（即我下载下来的 Gitee Pages 仓库）中随便放入一张图片<em>avatar.png</em>，然后推送到远程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入本地Pages仓库目录</span></span><br><span class="line"><span class="built_in">cd</span> blog-images/</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add images&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>并在 Gitee Pages 仓库中重新部署 Pages 服务：<img src="https://chua-n.gitee.io/figure-bed/blog/hexo搭博客/update-gitee-pages.png" alt=""></p>
<p>即可在书写 markdown 博客时通过链接格式<code>http://username.gitee.io/gitee_pages_repo_name/path_to_the_image</code>引用这张图片，对于我刚刚上传的这张图片，其链接为<code>https://chua-n.gitee.io/figure-bed/blog/avatar.png</code>。</p>
<p>我直接在这里引用示意一下，书写 markdown 语句<code>![](https://chua-n.gitee.io/figure-bed/blog/avatar.png)</code>，显示如下<img src="https://chua-n.gitee.io/figure-bed/blog/avatar.png" alt=""></p>
<blockquote>
<p>需要强调的是，目前 Gitee 做图床有一个比较麻烦的地方，每一次上传新的图片后，需要手动更新一下 Pages 服务，不然无法按照上述格式链接到新上传的图片，因为它们没有被部署到 Pages。</p>
</blockquote>
<h2 id="6-定义个性化域名"><a href="#6-定义个性化域名" class="headerlink" title="6. 定义个性化域名"></a>6. 定义个性化域名</h2><p>暂略……</p>
<h2 id="7-参考链接"><a href="#7-参考链接" class="headerlink" title="7. 参考链接"></a>7. 参考链接</h2><ol>
<li><a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a></li>
<li><a href="http://theme-next.iissnan.com/">Next 官方文档</a></li>
<li><a href="http://www.chenlianhan.com/">Han’s Blog</a></li>
<li><a href="https://io-oi.me/tech/hexo-next-optimization/">一休儿的博客</a></li>
<li><a href="https://tding.top/archives/ed8b904f.html">评论插件 Valine</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Java生成随机的验证码图片</title>
    <url>/blog/2021/06/27/Java%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<blockquote>
<p>日常琐碎代码片段记录。</p>
</blockquote>
<span id="more"></span>
<p>主要是第一次接触验证码随机生成的内容，感觉挺新鲜的，想着记录一下，实际内容倒没什么特别的干货。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuan.servlet.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/checkCodeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// 1. 创建一在内存中的图像对象</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 美化图片</span></span><br><span class="line">        <span class="comment">// 2.1. 填充背景色</span></span><br><span class="line">        <span class="type">Graphics</span> <span class="variable">graphics</span> <span class="operator">=</span> image.getGraphics(); <span class="comment">// 画笔对象</span></span><br><span class="line">        graphics.setColor(Color.PINK); <span class="comment">// 设置画笔颜色</span></span><br><span class="line">        graphics.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="comment">// 2.2. 画边框</span></span><br><span class="line">        graphics.setColor(Color.BLUE);</span><br><span class="line">        graphics.drawRect(<span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 2.3. 生成随机字符并写入验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(str.length());</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(index);</span><br><span class="line">            graphics.drawString(ch + <span class="string">&quot;&quot;</span>, (i + <span class="number">1</span>) * width / <span class="number">5</span>, height / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.4. 画干扰线</span></span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 将图片输出到页面中进行展示</span></span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>Python快速定位至文本文件的最后一行</title>
    <url>/blog/2021/03/19/Python%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E8%87%B3%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C/</url>
    <content><![CDATA[<p>编程语言在读取文本文件时总是自首行读取，因此文本开头的内容读取速度很快，那么如果文本量较大，如何快速读取文本仅最后一行呢？</p>
<blockquote>
<p>说得一本正经，但并不是为此而生(* ￣︿￣)。</p>
</blockquote>
<span id="more"></span>
<h2 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h2><p>办公室另个课题组野外项目多，经常要测各种数据，某天偶然聊到他们竟然有这样一个奇葩的需求：某仪器每次测一次数据，会得到一个含 725 份 txt 文本文件的文件夹，其中每个 txt 文本为 1000 多行、2 列的数据内容；每当仪器测出若干次数据后他们对数据进行一次分析，也就需要同时面对约二十个文件夹的近两万个 txt 文本，而他们的要求是所有的 txt 文本只取最后一行的第 2 个数字整理成 Excel 表然后做处理。</p>
<ul>
<li>一个文件夹：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -l</span></span><br><span class="line">.</span><br><span class="line">├── 1.txt</span><br><span class="line">├── 10.txt</span><br><span class="line">├── 100.txt</span><br><span class="line">├── 101.txt</span><br><span class="line">├── ...</span><br><span class="line">├── 96.txt</span><br><span class="line">├── 97.txt</span><br><span class="line">├── 98.txt</span><br><span class="line">└── 99.txt</span><br><span class="line"></span><br><span class="line">0 directories, 725 files</span><br></pre></td></tr></table></figure>
<ul>
<li>一个文件：</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">         Step Z Displace...</span><br><span class="line">------------- -------------</span><br><span class="line"> 2.650000e+03 -3.941945e-08</span><br><span class="line"> 2.660000e+03 -1.150117e-07</span><br><span class="line"> 2.670000e+03 -1.168365e-07</span><br><span class="line"> 2.680000e+03 -3.220245e-07</span><br><span class="line"> 2.690000e+03 -2.561211e-06</span><br><span class="line">      ...          ...</span><br></pre></td></tr></table></figure>
<p>他们原本是怎么做这项工作的呢？课题组分派六、七个有闲的人，每人均分一部分工作，通过 windows 记事本打开每个 txt 文本，拖动鼠标至最后一行，然后复制粘贴相应数据到 Excel 表格中，据师兄说这样差不多要干一个通宵。</p>
<p>我意识到这个“固定模式的简单重复性工作”写一份代码可以完全自动化批量处理呀，于是帮师兄师姐写了份 python 脚本，师兄也把刚刚已经分配给几位师弟的文件全收回来交给我统一处理，脚本在几秒钟就做完了他们的工作。这份代码其实异常简单，寥寥几行，留之无用、弃之可惜，笔者也就权当纪念意义留在这里吧。</p>
<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><blockquote>
<p>注：笔者的第一版本其实并非以下代码，原实现为暴力式搜索文本最后一行，此版源自网络，思路与性能更佳，故而也颇值得记录。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_last_line</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Find the last line of a file.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">    -----------</span></span><br><span class="line"><span class="string">    file(str): Absolute path of a file.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">        offset = -<span class="number">50</span>  <span class="comment"># initial offset</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            file_obj.seek(offset, <span class="number">2</span>)</span><br><span class="line">            lines = file_obj.readlines()</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(lines) &gt; <span class="number">1</span>):</span><br><span class="line">                last_line = lines[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                offset *= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> last_line.decode()</span><br></pre></td></tr></table></figure>
<h2 id="3-附：完整脚本"><a href="#3-附：完整脚本" class="headerlink" title="3. 附：完整脚本"></a>3. 附：完整脚本</h2><p>以上仅是定位文本最后一行的函数定义，以下将为师兄处理数据的完整工作脚本作为附录。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_last_line</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Find the last line of a file.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">    -----------</span></span><br><span class="line"><span class="string">    file(str): Absolute path of a file.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">        offset = -<span class="number">50</span>  <span class="comment"># initial offset</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            file_obj.seek(offset, <span class="number">2</span>)</span><br><span class="line">            lines = file_obj.readlines()</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(lines) &gt; <span class="number">1</span>):</span><br><span class="line">                last_line = lines[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                offset *= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> last_line.decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collect</span>(<span class="params">folder</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Collect the last data from a group of data-files in a folder</span></span><br><span class="line"><span class="string">    into a data structure, of pandas.Series, for later convenience.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">    -----------</span></span><br><span class="line"><span class="string">    folder(str): Absolute path of a folder.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    files = os.listdir(folder)</span><br><span class="line">    files.sort(key=<span class="keyword">lambda</span> filename: <span class="built_in">int</span>(filename[:-<span class="number">4</span>]))</span><br><span class="line">    excel = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        file = os.path.join(folder, file)</span><br><span class="line">        last_line = find_last_line(file)</span><br><span class="line">        excel.append(last_line.split()[-<span class="number">1</span>])</span><br><span class="line">    excel = pd.Series(excel, index=files)</span><br><span class="line">    <span class="keyword">return</span> excel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    basefolder = <span class="string">&quot;./ych&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> folder <span class="keyword">in</span> os.listdir(basefolder):</span><br><span class="line"></span><br><span class="line">        folder = os.path.join(basefolder, folder)</span><br><span class="line">        folder = os.path.abspath(folder)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(folder):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        excel = collect(folder)</span><br><span class="line">        excel_name = os.path.basename(folder) + <span class="string">&#x27;.xlsx&#x27;</span></span><br><span class="line">        <span class="comment"># 写入具体的excel文件</span></span><br><span class="line">        excel.to_excel(os.path.join(basefolder, excel_name), header=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>Python多进程</title>
    <url>/blog/2021/03/12/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<p>接连面临多个耗时性程序，形势已经演变到必须了解 Python 并行计算的地步了。</p>
<span id="more"></span>
<h2 id="0-从-Unix-Linux-的fork-说起"><a href="#0-从-Unix-Linux-的fork-说起" class="headerlink" title="0. 从 Unix/Linux 的fork()说起"></a>0. 从 Unix/Linux 的<code>fork()</code>说起</h2><p>在 Unix/Linux 系统中，提供了一个系统级函数<code>fork()</code>，普通的函数调用一次、返回一次，而<code>fork()</code>调用一次、返回两次，因为操作系统把当前进程（父进程）复制了一份（子进程），此时出现两份进程，于是该函数分别在该父、子进程中返回。</p>
<p><code>fork()</code>函数在父进程中的返回值为子进程的进程 ID（Process ID, pid），在子进程中的返回值永远为 0。不过，在子进程中，可以通过调用<code>getppid()</code>拿到父进程的 pid。</p>
<p>如以下在 linux 系统中的 python 程序演示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印当前进程，即父进程的pid</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Process <span class="subst">&#123;os.getpid()&#125;</span> starts...&quot;</span>)</span><br><span class="line"></span><br><span class="line">pid = os.fork()  <span class="comment"># 创建了一个子进程</span></span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;I am child process <span class="subst">&#123;os.getpid()&#125;</span> and my parent process is <span class="subst">&#123;os.getppid()&#125;</span>.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;I (<span class="subst">&#123;os.getpid()&#125;</span>) just created a child process <span class="subst">&#123;pid&#125;</span>)&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Process 483317 starts...</span><br><span class="line">I (483317) just created a child process 483318)</span><br><span class="line">I am child process 483318 and my parent process is 483317.</span><br></pre></td></tr></table></figure>
<p>故而，有了<code>fork()</code>，一个进程在处理某些任务时就可以复制出一个子进程来协助处理这些任务，充分利用计算机的多核处理优势，实现并行处理。</p>
<h2 id="1-multiprocessing-标准库"><a href="#1-multiprocessing-标准库" class="headerlink" title="1. multiprocessing 标准库"></a>1. multiprocessing 标准库</h2><p>Windows 系统下没有<code>fork()</code>调用，不过 python 作为跨平台的编程语言，当然会提供统一的接口方便编写多进程程序，这就是标准库中的<code>multiprocessing</code>了。</p>
<blockquote>
<p>注意，<code>Process</code>类和<code>Pool</code>类都支持上下文管理器协议了，即可以使用<code>with</code>。</p>
</blockquote>
<h3 id="1-1-Process-类"><a href="#1-1-Process-类" class="headerlink" title="1.1. Process 类"></a>1.1. Process 类</h3><p>multiprocessing 库使用<code>Process</code>类代表一个进程对象，可以用它来在当前进程中创建子进程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Child process <span class="subst">&#123;name&#125;</span> (<span class="subst">&#123;os.getpid()&#125;</span>) is running...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Parent process is <span class="subst">&#123;os.getpid()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 创建一个子进程对象，但在执行它的start()方法之前它并非真正的“进程”</span></span><br><span class="line">p = Process(target=func, args=(<span class="string">&#x27;test&#x27;</span>,))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Attention! Child process will start.&quot;</span>)</span><br><span class="line"><span class="comment"># 子进程被激活</span></span><br><span class="line">p.start()</span><br><span class="line"><span class="comment"># 调用进程的join()方法意味着：当前进程在子进程的任务完成以前，都不会向下执行语句</span></span><br><span class="line">p.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Child process ends running.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>打印结果如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Parent process is 486285</span><br><span class="line">Attention! Child process will start.</span><br><span class="line">Child process test (486286) is running...</span><br><span class="line">Child process ends running.</span><br></pre></td></tr></table></figure>
<p>对于不熟悉多进程的程序员而言，不妨试试将上述代码中的<code>p.join()</code>注释掉，会发现整个程序的执行结果<em>通常</em>如下，也就是主程序不会等待子进程的执行结束即立刻向下执行，导致子进程明明没有执行结束，却打印出昭示子进程运行结束的语句<code>Child process ends running.</code></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Parent process is 486490</span><br><span class="line">Attention! Child process will start.</span><br><span class="line">Child process ends running.</span><br><span class="line">Child process test (486491) is running...</span><br></pre></td></tr></table></figure>
<p>关于<code>Process</code>类中方法的更多介绍，参见<a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html#the-process-class">官方文档</a>。</p>
<h3 id="1-2-Pool-类"><a href="#1-2-Pool-类" class="headerlink" title="1.2. Pool 类"></a>1.2. Pool 类</h3><p>当需要多个子进程时，每次都使用<code>Process</code>类去创建一个子进程太麻烦了，可以使用<strong>进程池</strong>来批量创建子进程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longTimeTask</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Run task <span class="subst">&#123;name&#125;</span> (<span class="subst">&#123;os.getpid()&#125;</span>)&quot;</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random()*<span class="number">5</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Task <span class="subst">&#123;name&#125;</span> (<span class="subst">&#123;os.getpid()&#125;</span>) runs <span class="subst">&#123;end-start :<span class="number">.2</span>f&#125;</span> seconds.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Parent process <span class="subst">&#123;os.getpid()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建有4个进程的进程池</span></span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="comment"># apply_async方法随机挑选一个进程池中的空闲进程执行传入的方法</span></span><br><span class="line">        <span class="comment"># 并返回一个AsyncResult对象</span></span><br><span class="line">        p.apply_async(longTimeTask, args=(i,))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Waiting for all subprocesses done...&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭进程池：阻止后续任务提交到进程池，当所有任务执行完毕后工作进程退出</span></span><br><span class="line">    p.close()</span><br><span class="line">    <span class="comment"># 主程序等待工作进程结束。调用join()方法之前必须先调用close()或terminate()</span></span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;All subprocesses done, time cost is <span class="subst">&#123;end-start :<span class="number">.2</span>f&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果如下（不熟悉并行计算的请注意总程序运行时间的 7.72 s 远远少于 7 个任务分别执行的耗时总和 1.74+3.80+4.72+4.90+4.53+2.73+2.76=25.18 s，这便是并行计算了）：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Parent process 493253</span><br><span class="line">Waiting for all subprocesses done...</span><br><span class="line">Run task 0 (493256)</span><br><span class="line">Run task 2 (493255)</span><br><span class="line">Run task 1 (493254)</span><br><span class="line">Run task 3 (493257)</span><br><span class="line">Task 2 (493255) runs 1.74 seconds.</span><br><span class="line">Run task 4 (493255)</span><br><span class="line">Task 1 (493254) runs 3.80 seconds.</span><br><span class="line">Run task 5 (493254)</span><br><span class="line">Task 0 (493256) runs 4.72 seconds.</span><br><span class="line">Run task 6 (493256)</span><br><span class="line">Task 3 (493257) runs 4.90 seconds.</span><br><span class="line">Task 4 (493255) runs 4.53 seconds.</span><br><span class="line">Task 5 (493254) runs 2.73 seconds.</span><br><span class="line">Task 6 (493256) runs 2.76 seconds.</span><br><span class="line">All subprocesses done, time cost is 7.52.</span><br></pre></td></tr></table></figure>
<p>关于<code>Pool</code>类的方法（详情请见<a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html#multiprocessing.pool.Pool">官方文档</a>）；</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>apply(func[, args[, kwds]])</code></td>
<td style="text-align:center">调用一个进程池中的空闲进程执行相关函数，该函数执行完毕之前父进程会阻塞</td>
</tr>
<tr>
<td style="text-align:center"><code>apply_async(func[, args[, kwds[, callback[, error_callback]]]])</code></td>
<td style="text-align:center"><code>apply()</code>方法的一个变种，区别是不会阻塞，并返回一个<code>AsyncResult</code>对象</td>
</tr>
<tr>
<td style="text-align:center"><code>map(func, iterable[, chunksize])</code></td>
<td style="text-align:center">内置函数<code>map()</code>的并行版本，这会保持阻塞直到被执行函数执行结束</td>
</tr>
<tr>
<td style="text-align:center"><code>map_async(func, iterable[, chunksize[, callback[, error_callback]]])</code></td>
<td style="text-align:center"><code>map()</code> 方法的一个变种，区别是不会阻塞，并返回一个<code>AsyncResult</code>对象</td>
</tr>
<tr>
<td style="text-align:center"><code>imap(func, iterable[, chunksize])</code></td>
<td style="text-align:center"><code>map()</code>的延迟执行版本</td>
</tr>
<tr>
<td style="text-align:center"><code>imap_unordered(func, iterable[, chunksize])</code></td>
<td style="text-align:center">和 <code>imap()</code> 相同，只是通过迭代器返回的结果是任意的</td>
</tr>
<tr>
<td style="text-align:center"><code>starmap(func, iterable[, chunksize])</code></td>
<td style="text-align:center">和 <code>map()</code> 类似，不过 iterable 中的每一项会被解包再作为函数参数</td>
</tr>
<tr>
<td style="text-align:center"><code>starmap_async(func, iterable[, chunksize[, callback[, error_callback]]])</code></td>
<td style="text-align:center">相当于<code>starmap()</code>与<code>map_async()</code>的结合</td>
</tr>
<tr>
<td style="text-align:center"><code>close()</code></td>
<td style="text-align:center">阻止后续任务提交到进程池，当所有任务执行完成后，工作进程会退出</td>
</tr>
<tr>
<td style="text-align:center"><code>terminate()</code></td>
<td style="text-align:center">不等待未完成任务，立即停止工作进程。当进程池对象被垃圾回收时， 会立即调用<code>terminate()</code></td>
</tr>
<tr>
<td style="text-align:center"><code>join()</code></td>
<td style="text-align:center">等待工作进程结束。调用<code>join()</code>前必须先调用<code>close()</code>或者<code>terminate</code>()</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-进程同步、进程通信等"><a href="#2-进程同步、进程通信等" class="headerlink" title="2. 进程同步、进程通信等"></a>2. 进程同步、进程通信等</h2><p>未完待续……</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>Python自动化操作GUI</title>
    <url>/blog/2022/01/28/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9CGUI/</url>
    <content><![CDATA[<p>Python 实现对 windows 鼠标和键盘的接管，自动化 GUI 操作。</p>
<span id="more"></span>
<h2 id="1-PyAutoGUI-简介"><a href="#1-PyAutoGUI-简介" class="headerlink" title="1. PyAutoGUI 简介"></a>1. PyAutoGUI 简介</h2><blockquote>
<p>详细教程推荐查看文档：<a href="https://pyautogui.readthedocs.io/en/latest/index.html">Welcome to PyAutoGUI’s documentation! — PyAutoGUI documentation</a> 。</p>
</blockquote>
<p><a href="https://github.com/asweigart/pyautogui">PyAutoGUI</a> 接管了鼠标、键盘使用权，基本上完全仿照人的操作，底层不必套牢在 Windows 系统，因而是跨平台的。这类 GUI 自动化工具的初衷是给 GUI 程序自动化测试用，产生点击鼠标、敲击键盘的行为，在日志中记录下消息事件和 GUI 程序的响应结果，事后分析 GUI 程序可能存在的 bug。不过，既然能产生点击鼠标、敲击键盘的行为，我们就可以用来控制 GUI 程序批量完成文件编辑、保存工作。</p>
<p>按照官方的说法，<code>PyAutoGUI</code>给人类用的 GUI 自动化神器，简单高效、函数分类清晰，它被<a href="https://link.zhihu.com/?target=https%3A//github.com/vinta/awesome-python">awesome-python</a>、<a href="https://link.zhihu.com/?target=https%3A//github.com/jobbole/awesome-python-cn">awesome-python-cn</a>收录。</p>
<p>安装 PyAutoGUI：<code>py -m pip install pyautogui</code>。</p>
<h2 id="2-保护措施"><a href="#2-保护措施" class="headerlink" title="2. 保护措施"></a>2. 保护措施</h2><p>Python 移动鼠标、点击键盘非常快，有可能导致其他应用出现问题。在这种情况下，程序可能会失控（即使是按照你的意思执行的），那时就需要中断。如果鼠标还在自动操作，就很难在程序窗口关闭它。</p>
<p>为了能够及时中断，PyAutoGUI 提供了一个保护措施：当<code>pyautogui.FAILSAFE = True</code>时，如果把鼠标光标在屏幕左上角，PyAutoGUI 函数就会产生<code>pyautogui.FailSafeException</code>异常，因此如果你的程序失控了导致需要中断 PyAutoGUI 函数，就把鼠标光标在屏幕左上角。</p>
<p>要禁用这个特性，就把<code>FAILSAFE</code>设置成<code>False</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pyautogui</span><br><span class="line">pyautogui.FAILSAFE = False</span><br></pre></td></tr></table></figure>
<p>通过把<code>pyautogui.PAUSE</code>设置成<code>float</code>或<code>int</code>时间（秒），可以为所有的 PyAutoGUI 函数增加延迟。默认延迟时间是 0.1 秒。在函数循环执行的时候，这样做可以让 PyAutoGUI 运行的慢一点，非常有用。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">pyautogui.PAUSE = <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line">pyautogui.moveTo(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">pyautogui.click()</span><br></pre></td></tr></table></figure>
<p>所有的 PyAutoGUI 函数在延迟完成前都处于阻塞状态（blocked），PyAutoGUI 未来计划增加一个可选的非阻塞模式来调用函数。</p>
<p>通常建议<code>PAUSE</code>和<code>FAILSAFE</code>一起使用。</p>
<h2 id="3-鼠标操作"><a href="#3-鼠标操作" class="headerlink" title="3. 鼠标操作"></a>3. 鼠标操作</h2><ul>
<li><p>获取鼠标当前位置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: pyautogui.position() <span class="comment"># 获取鼠标当前位置</span></span><br><span class="line">Out[<span class="number">3</span>]: Point(x=<span class="number">846</span>, y=<span class="number">437</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>移动</p>
<ul>
<li><code>pyautogui.moveTo(x,y[,duration = t])</code>：鼠标移动到指定位置，<code>duration</code>指定移动的耗时，省略时表示立即移动</li>
<li><code>pyautogui.moveRel(x,y[,duration = t])</code>：鼠标相对于当前位置移动指定的偏移量</li>
</ul>
</li>
<li><p>点击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按下鼠标按键（左键）</span></span><br><span class="line">pyautogui.mouseDown()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放鼠标按键（左键）</span></span><br><span class="line">pyautogui.mouseUp()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向计算机发送虚拟的鼠标点击(click()函数只是前面两个函数调用的方便封装)</span></span><br><span class="line"><span class="comment"># 默认在当前光标位置，使用鼠标左键点击，可选择在(x,y)处点击鼠标左键、右键、中键</span></span><br><span class="line">pyautogui.click([x,y,button=<span class="string">&#x27;left/right/middle&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单击鼠标右键</span></span><br><span class="line">pyautogui.rightClick()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单击鼠标中键</span></span><br><span class="line">pyautogui.middleClick()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双击鼠标左键</span></span><br><span class="line">pyautogui.doubleClick()</span><br></pre></td></tr></table></figure>
</li>
<li><p>拖动：按住一个键不放，同时移动鼠标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将鼠标拖动到指定位置</span></span><br><span class="line">pyautogui.dragTo(x,y[,duration=t])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将鼠标拖动到相对当前位置的位置</span></span><br><span class="line">pyautogui.dragRel(x,y[,duration=t])</span><br></pre></td></tr></table></figure>
</li>
<li><p>滚动：模拟鼠标划轮控制窗口上下滚动（滚动发生在鼠标的当前位置），正数表示向上滚动，负数表示向下滚动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.scroll()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-键盘操作"><a href="#4-键盘操作" class="headerlink" title="4. 键盘操作"></a>4. 键盘操作</h2><ul>
<li><p>输入字符串：<code>pyautogui.typewrite(message, interval=0.0, logScreenshot=None, _pause=True)</code></p>
<ul>
<li><p>输入单个字符（不支持中文字符，因为函数无法知道输入法需要什么按键才能得到中文字符）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.typewrite(<span class="string">&#x27;Hello world!&#x27;</span>, <span class="number">0.25</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Hello world!</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入特殊字符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.typewrite([<span class="string">&#x27;enter&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>], <span class="string">&#x27;0.25&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>XYab</span><br></pre></td></tr></table></figure>
<blockquote>
<p>PyAutoGUI 键盘表：</p>
<p>| 字符串                                | 键盘操作                              |<br>| ——————————————————- | ——————————————————- |<br>| ‘enter’(或‘return’ 或 ‘\n’)           | 回车                                  |<br>| ‘esc’                                 | ESC 键                                |<br>| ‘shiftleft’, ‘shiftright’             | 左右 SHIFT 键                         |<br>| ‘altleft’, ‘altright’                 | 左右 ALT 键                           |<br>| ‘ctrlleft’, ‘ctrlright’               | 左右 CTRL 键                          |<br>| ‘tab’ (‘\t’)                          | TAB 键                                |<br>| ‘backspace’, ‘delete’                 | BACKSPACE 、DELETE 键                 |<br>| ‘pageup’, ‘pagedown’                  | PAGE UP 和 PAGE DOWN 键               |<br>| ‘home’, ‘end’                         | HOME 和 END 键                        |<br>| ‘up’, ‘down’, ‘left’,‘right’          | 箭头键                                |<br>| ‘f1’, ‘f2’, ‘f3’….                    | F1…….F12 键                           |<br>| ‘volumemute’, ‘volumedown’,‘volumeup’ | 有些键盘没有                          |<br>| ‘pause’                               | PAUSE 键                              |<br>| ‘capslock’, ‘numlock’,‘scrolllock’    | CAPS LOCK, NUM LOCK, 和 SCROLLLOCK 键 |<br>| ‘insert’                              | INS 或 INSERT 键                      |<br>| ‘printscreen’                         | PRTSC 或 PRINT SCREEN 键              |<br>| ‘winleft’, ‘winright’                 | Win 键                                |<br>| ‘command’                             | Mac OS X command 键                   |</p>
</blockquote>
</li>
</ul>
</li>
<li><p>按键的按下和释放（和鼠标按键非常类似）：</p>
<ul>
<li><code>pyautogui.keyDown()</code>：按下某个键</li>
<li><code>pyautogui.keyUp()</code>：松开某个键</li>
<li><code>pyautogui.press()</code>：一次完整的击键，前面两个函数的组合。</li>
</ul>
</li>
<li><p>直接使用快捷键函数<code>hotkey</code>——接受多个键名参数，按传入顺序按下，再按照相反顺序释放：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.hotkey(<span class="string">&#x27;altleft&#x27;</span>, <span class="string">&#x27;f4&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5-消息弹窗"><a href="#5-消息弹窗" class="headerlink" title="5. 消息弹窗"></a>5. 消息弹窗</h2><p>PyAutoGUI 利用 pymsgbox 的功能，以 JavaScript 风格函数提供消息框功能，包括以下函数，它们连参数都是一致的，熟悉 JavaScript 的朋友不会陌生。</p>
<ul>
<li><code>alert()</code>：提示框</li>
<li><code>confirm()</code>：选择框</li>
<li><code>prompt()</code>：普通输入</li>
<li><code>password()</code>：密码输入</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">24</span>]: pyautogui.alert(text=<span class="string">&#x27;警告&#x27;</span>,title=<span class="string">&#x27;PyAutoGUI消息框&#x27;</span>,button=<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">Out[<span class="number">24</span>]: <span class="string">&#x27;OK&#x27;</span> <span class="comment"># 点击的按键被返回</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: pyautogui.confirm(text=<span class="string">&#x27;请选择&#x27;</span>,title=<span class="string">&#x27;PyAutoGUI消息框&#x27;</span>,buttons=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span></span><br><span class="line">    ...: ,<span class="string">&#x27;3&#x27;</span>])</span><br><span class="line">Out[<span class="number">28</span>]: <span class="string">&#x27;2&#x27;</span> <span class="comment"># 点击的按键被返回</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: pyautogui.prompt(text=<span class="string">&#x27;请输入&#x27;</span>,title=<span class="string">&#x27;PyAutoGUI消息框&#x27;</span>,default=<span class="string">&#x27;请输入&#x27;</span>)</span><br><span class="line">Out[<span class="number">30</span>]: <span class="string">&#x27;input by 伪码人&#x27;</span> <span class="comment"># 点OK按钮后返回输入内容</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: pyautogui.password(text=<span class="string">&#x27;输入密码&#x27;</span>,title=<span class="string">&#x27;PyAutoGUI消息框&#x27;</span>,default=<span class="string">&#x27;&#x27;</span>,mask=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">Out[<span class="number">32</span>]: <span class="string">&#x27;We_Coder&#x27;</span> <span class="comment"># 点OK按钮后返回输入内容</span></span><br></pre></td></tr></table></figure>
<h2 id="6-屏幕处理"><a href="#6-屏幕处理" class="headerlink" title="6. 屏幕处理"></a>6. 屏幕处理</h2><p>有时我们需要监控屏幕上的内容，从而决定要不要进行对应的操作，pyautogui 提供了一些相关的方法。</p>
<ul>
<li><p>获取屏幕尺寸：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: pyautogui.size()  <span class="comment"># 获取屏幕尺寸（分辨率×分辨率）</span></span><br><span class="line">Out[<span class="number">2</span>]: Size(width=<span class="number">1920</span>, height=<span class="number">1080</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断坐标是否在屏幕范围内：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">4</span>]: pyautogui.onScreen(<span class="number">100</span>,<span class="number">200</span>) <span class="comment"># 判断坐标是否在屏幕范围内</span></span><br><span class="line">Out[<span class="number">4</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: pyautogui.onScreen(<span class="number">100</span>,<span class="number">2000</span>) <span class="comment"># 判断坐标是否在屏幕范围内</span></span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取屏幕截图：<code>screenshot()</code>，可以返回一个 Pillow 的<code>Image</code>对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">im = pyautogui.screenshot()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得某个坐标的像素</span></span><br><span class="line">im.getpixel((<span class="number">50</span>, <span class="number">200</span>)) <span class="comment"># (30, 132, 153)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断屏幕坐标的像素是不是等于某个值</span></span><br><span class="line">pyautogui.pixelMatchesColor(<span class="number">50</span>, <span class="number">200</span>, (<span class="number">30</span>, <span class="number">132</span>, <span class="number">153</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>图片匹配：在屏幕按像素匹配，定位图片在屏幕上的坐标位置</p>
<ul>
<li><p><code>locateOnScreen(*args, **kwargs)</code>：返回<code>Box</code>对象，即左上角坐标、宽度、高度 4 个值组成的元组；若未找到返回<code>None</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">30</span>]: shot = pyautogui.screenshot(region=(<span class="number">0</span>, <span class="number">270</span>, <span class="number">170</span>, <span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: shot.show()</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: res = pyautogui.locateOnScreen(shot);res</span><br><span class="line">Out[<span class="number">32</span>]: Box(left=<span class="number">0</span>, top=<span class="number">270</span>, width=<span class="number">170</span>, height=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: pyautogui.center(res) <span class="comment"># 可用`center()`函数计算出中心坐标。</span></span><br><span class="line">Out[<span class="number">33</span>]: Point(x=<span class="number">85</span>, y=<span class="number">370</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>locateCenterOnScreen</code>：一步到位，返回中心坐标。</p>
</li>
<li><p><code>locateAllOnScreen</code>：找到所有匹配的位置。</p>
</li>
</ul>
</li>
</ul>
<h2 id="7-示例"><a href="#7-示例" class="headerlink" title="7. 示例"></a>7. 示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> keyboard</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMousePositon</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取鼠标位置&quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)  <span class="comment"># 准备时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------开始获取鼠标位置-------&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># Get and print the mouse coordinates.</span></span><br><span class="line">            x, y = pyautogui.position()</span><br><span class="line">            positionStr = <span class="string">f&quot;鼠标坐标点：(x, y)= (<span class="subst">&#123;<span class="built_in">str</span>(x).rjust(<span class="number">4</span>)&#125;</span>, <span class="subst">&#123;<span class="built_in">str</span>(y).rjust(<span class="number">4</span>)&#125;</span>), &quot;</span></span><br><span class="line">            pix = pyautogui.screenshot().getpixel((x, y))  <span class="comment"># 获取鼠标所在屏幕点的RGB颜色</span></span><br><span class="line">            positionStr += <span class="string">f&quot;该位置的颜色：RGB = (<span class="subst">&#123;<span class="built_in">str</span>(pix[<span class="number">0</span>]).rjust(<span class="number">3</span>)&#125;</span>, <span class="subst">&#123;<span class="built_in">str</span>(pix[<span class="number">1</span>]).rjust(<span class="number">3</span>)&#125;</span>, <span class="subst">&#123;<span class="built_in">str</span>(pix[<span class="number">2</span>]).rjust(<span class="number">3</span>)&#125;</span>)&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(positionStr)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)  <span class="comment"># 停顿时间</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取鼠标位置失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">times=<span class="number">1</span></span>):</span><br><span class="line">    folder = <span class="string">&quot;./steps&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(folder):</span><br><span class="line">        os.mkdir(folder)</span><br><span class="line">    filenames = os.listdir(folder)</span><br><span class="line">    filenames.sort()</span><br><span class="line">    maxNum = <span class="built_in">int</span>(filenames[-<span class="number">1</span>][:-<span class="number">4</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(filenames) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    initPosition = (<span class="number">697</span>, <span class="number">1428</span>)</span><br><span class="line">    x, y = initPosition</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(times):</span><br><span class="line">        pyautogui.moveTo(x, y)</span><br><span class="line">        pyautogui.click()</span><br><span class="line">        pyautogui.hotkey(<span class="string">&quot;alt&quot;</span>, <span class="string">&quot;enter&quot;</span>)</span><br><span class="line">        pyautogui.screenshot(<span class="string">f&quot;<span class="subst">&#123;folder&#125;</span>/<span class="subst">&#123;<span class="built_in">str</span>(maxNum + i + <span class="number">1</span>).zfill(<span class="number">4</span>)&#125;</span>.png&quot;</span>,</span><br><span class="line">                             region=(<span class="number">0</span>, y - <span class="number">250</span>, <span class="number">1000</span>, <span class="number">600</span>))</span><br><span class="line">        pyautogui.press(keys=[<span class="string">&quot;up&quot;</span>, <span class="string">&quot;enter&quot;</span>])</span><br><span class="line">        <span class="comment"># time.sleep(0.5)  # 停顿时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">keyboardEvent</span>):</span><br><span class="line">    <span class="keyword">if</span> (keyboardEvent.event_type == <span class="string">&quot;esc&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(keyboardEvent)</span><br><span class="line">        <span class="comment"># raise SystemError(&quot;主动终止程序!&quot;)</span></span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    keyboard.hook(callback)</span><br><span class="line">    <span class="comment"># keyboard.wait()</span></span><br><span class="line">    <span class="comment"># getMousePositon()</span></span><br><span class="line">    task(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://chua-n.gitee.io/figure-bed/blog/python自动化操作GUI/pyautogui.gif" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>使用SSH把个人电脑配置成 linux 服务器</title>
    <url>/blog/2020/06/23/SSH%E9%85%8D%E7%BD%AElinux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>以前不懂计算机网络的时候，总觉得服务器是一个很神奇的东西，等到突然知道了 SSH 可以在命令行下连接并操纵另一台电脑，原来每一台电脑都可以作为 C/S 架构中的服务器，于是拿自己的笔记本电脑捣腾了一番。</p>
<span id="more"></span>
<h2 id="1-更新软件源"><a href="#1-更新软件源" class="headerlink" title="1. 更新软件源"></a>1. 更新软件源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
<h2 id="2-安装并启动-sshserver"><a href="#2-安装并启动-sshserver" class="headerlink" title="2. 安装并启动 sshserver"></a>2. 安装并启动 sshserver</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br><span class="line"><span class="comment"># 查看是否已默认启动，如已下输出看到了sshd则已经启动</span></span><br><span class="line">ps -e | grep ssh</span><br><span class="line"><span class="comment"># 若无，启动sshserver</span></span><br><span class="line">/etc/init.d/ssh start</span><br><span class="line">/etc/init.d/ssh restart</span><br><span class="line"><span class="comment"># 可再次查看sshd进程是否已启动</span></span><br><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure>
<h2 id="3-创建-linux-使用帐户"><a href="#3-创建-linux-使用帐户" class="headerlink" title="3. 创建 linux 使用帐户"></a>3. 创建 linux 使用帐户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> /etc/passwd  <span class="comment"># 查看已有用户</span></span><br><span class="line">useradd chuan -ms /bin/bash</span><br><span class="line">passwd chuan  <span class="comment"># 更改密码</span></span><br></pre></td></tr></table></figure>
<h2 id="4-添加管理员权限（可选）"><a href="#4-添加管理员权限（可选）" class="headerlink" title="4. 添加管理员权限（可选）"></a>4. 添加管理员权限（可选）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>找到以下这两行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># User privilege specification</span></span><br><span class="line">root ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>
<p>在下面跟<code>root ALL=(ALL:ALL) ALL</code>对齐着添加<code>chuan ALL=(ALL:ALL) ALL</code>即可。</p>
<h2 id="5-远程连接服务器"><a href="#5-远程连接服务器" class="headerlink" title="5. 远程连接服务器"></a>5. 远程连接服务器</h2><p>方法很多，linux 系统下可直接在 shell 中连接，windows 也可以在 cmd 里连接（但要安装有 ssh），还有装 Git 的时候附带的 git bash 里其实也能连接。具体命令行操作为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># username为你在服务器上注册的用户名，host_ip为服务器的 IP 地址</span></span><br><span class="line">ssh username@host_ip</span><br></pre></td></tr></table></figure>
<p>此外，windows 下还可以通过流行的 Xshell 等软件来连接。</p>
<h2 id="6-附记"><a href="#6-附记" class="headerlink" title="6. 附记"></a>6. 附记</h2><p>值得一提的是，通过 ssh 的连接方式似乎不能直接在公共的互联网上使用，在校园环境内，个人电脑与服务器都是学校的局域网，所以能直接连接，个人电脑在校外的时候需要用学校的 VPN 接入校园网络后才能连接。</p>
<p>我之前做实验，在家里先将自己的笔记本配置成服务器，让位于其他省的同学尝试连接我的笔记本，结果就是连不上的，但是此时再用一台笔记本连上自己家的网，就能连接了，因为是在同一个小局域网之下。前者失败的原因，百度了下好像是由于我是通过家里的无线 WIFI 连网的，这个首先要设置好路由器的跳转连接，不然人家对你的 IP 地址搜不到；不过，即便个人路由器已配置好，能否直接通过公有的互联网连接成功尚有疑问。</p>
<p>先挖个坑，后续有时间了再来了解下相关原理吧。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet+MyBatis小小使用</title>
    <url>/blog/2021/06/27/Servlet-MyBatis%E5%B0%8F%E5%B0%8F%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在学 Servlet 的时候，视频老师用的是 JDBC/Spring JDBCTemplate 作为 DAO 层技术的，但现在主流技术都是 MyBatis 嘛，自己又是个新手，MyBatis 刚学了也没怎么实践过，就想着自己胡戳着把 DAO 层改成 MyBatis 来实现，同时增强 Servlet 和 MyBatis 的基础使用知识。</p>
<span id="more"></span>
<blockquote>
<p>需要额外提一句的是，这里没有使用数据库连接池技术，有点遗憾但饭还得一口一口吃。</p>
</blockquote>
<h2 id="1-项目概览"><a href="#1-项目概览" class="headerlink" title="1. 项目概览"></a>1. 项目概览</h2><p>先来看看项目结构，主要关注 Java 代码目录 com/chuan/servlet/*，及相关的配置文件目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">├── servlet.iml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   │   └── com</span><br><span class="line">│   │   │       └── chuan</span><br><span class="line">│   │   │           └── servlet</span><br><span class="line">│   │   │               ├── entity</span><br><span class="line">│   │   │               │   └── User.java</span><br><span class="line">│   │   │               ├── mapper</span><br><span class="line">│   │   │               │   └── UserMapper.java</span><br><span class="line">│   │   │               ├── service</span><br><span class="line">│   │   │               │   └── UserService.java</span><br><span class="line">│   │   │               └── web</span><br><span class="line">│   │   │                   ├── ServletTestDemo1.java</span><br><span class="line">│   │   │                   └── servlet</span><br><span class="line">│   │   │                       ├── LoginFailServlet.java</span><br><span class="line">│   │   │                       ├── LoginServlet.java</span><br><span class="line">│   │   │                       └── LoginSuccessServlet.java</span><br><span class="line">│   │   ├── resources</span><br><span class="line">│   │   │   ├── com</span><br><span class="line">│   │   │   │   └── chuan</span><br><span class="line">│   │   │   │       └── servlet</span><br><span class="line">│   │   │   │           └── mapper</span><br><span class="line">│   │   │   │               └── UserMapper.xml</span><br><span class="line">│   │   │   ├── jdbc.properties</span><br><span class="line">│   │   │   └── sqlMapConfig.xml</span><br><span class="line">│   │   └── webapp</span><br><span class="line">│   │       ├── WEB-INF</span><br><span class="line">│   │       │   └── web.xml</span><br><span class="line">│   │       ├── index.jsp</span><br><span class="line">│   │       └── login.html</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java</span><br><span class="line">│       │   └── com</span><br><span class="line">│       │       └── chuan</span><br><span class="line">│       │           └── servlet</span><br><span class="line">│       │               └── service</span><br><span class="line">│       │                   └── UserServiceTest.java</span><br><span class="line">│       └── resources</span><br><span class="line">└── target</span><br><span class="line">    ├── classes</span><br><span class="line">    │   ├── com</span><br><span class="line">    │   │   └── chuan</span><br><span class="line">    │   │       └── servlet</span><br><span class="line">    │   │           ├── entity</span><br><span class="line">    │   │           │   └── User.class</span><br><span class="line">    │   │           ├── mapper</span><br><span class="line">    │   │           │   ├── UserMapper.class</span><br><span class="line">    │   │           │   └── UserMapper.xml</span><br><span class="line">    │   │           ├── service</span><br><span class="line">    │   │           │   └── UserService.class</span><br><span class="line">    │   │           └── web</span><br><span class="line">    │   │               ├── ServletTestDemo1.class</span><br><span class="line">    │   │               └── servlet</span><br><span class="line">    │   │                   ├── LoginFailServlet.class</span><br><span class="line">    │   │                   ├── LoginServlet.class</span><br><span class="line">    │   │                   └── LoginSuccessServlet.class</span><br><span class="line">    │   ├── jdbc.properties</span><br><span class="line">    │   └── sqlMapConfig.xml</span><br><span class="line">    ├── generated-sources</span><br><span class="line">    │   └── annotations</span><br><span class="line">    ├── generated-test-sources</span><br><span class="line">    │   └── test-annotations</span><br><span class="line">    ├── servlet-1.0-SNAPSHOT</span><br><span class="line">    │   ├── META-INF</span><br><span class="line">    │   │   └── MANIFEST.MF</span><br><span class="line">    │   ├── WEB-INF</span><br><span class="line">    │   │   ├── classes</span><br><span class="line">    │   │   │   ├── com</span><br><span class="line">    │   │   │   │   └── chuan</span><br><span class="line">    │   │   │   │       └── servlet</span><br><span class="line">    │   │   │   │           ├── entity</span><br><span class="line">    │   │   │   │           │   └── User.class</span><br><span class="line">    │   │   │   │           ├── mapper</span><br><span class="line">    │   │   │   │           │   ├── UserMapper.class</span><br><span class="line">    │   │   │   │           │   └── UserMapper.xml</span><br><span class="line">    │   │   │   │           ├── service</span><br><span class="line">    │   │   │   │           │   └── UserService.class</span><br><span class="line">    │   │   │   │           └── web</span><br><span class="line">    │   │   │   │               ├── ServletTestDemo1.class</span><br><span class="line">    │   │   │   │               └── servlet</span><br><span class="line">    │   │   │   │                   ├── LoginFailServlet.class</span><br><span class="line">    │   │   │   │                   ├── LoginServlet.class</span><br><span class="line">    │   │   │   │                   └── LoginSuccessServlet.class</span><br><span class="line">    │   │   │   ├── jdbc.properties</span><br><span class="line">    │   │   │   └── sqlMapConfig.xml</span><br><span class="line">    │   │   ├── lib</span><br><span class="line">    │   │   │   ├── lombok-1.18.18.jar</span><br><span class="line">    │   │   │   ├── mybatis-3.5.6.jar</span><br><span class="line">    │   │   │   ├── mysql-connector-java-8.0.11.jar</span><br><span class="line">    │   │   │   ├── protobuf-java-2.6.0.jar</span><br><span class="line">    │   │   │   ├── slf4j-api-1.7.30.jar</span><br><span class="line">    │   │   │   └── slf4j-simple-1.7.30.jar</span><br><span class="line">    │   │   └── web.xml</span><br><span class="line">    │   ├── index.jsp</span><br><span class="line">    │   └── login.html</span><br><span class="line">    └── test-classes</span><br><span class="line">        └── com</span><br><span class="line">            └── chuan</span><br><span class="line">                └── servlet</span><br><span class="line">                    └── service</span><br><span class="line">                        └── UserServiceTest.class</span><br><span class="line"></span><br><span class="line">57 directories, 47 files</span><br></pre></td></tr></table></figure>
<p>这里是项目的<code>pom.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chuan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>5.7.1<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-User-java"><a href="#2-User-java" class="headerlink" title="2. User.java"></a>2. <code>User.java</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuan.servlet.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-UserMapper-java-amp-UserMapper-xml"><a href="#3-UserMapper-java-amp-UserMapper-xml" class="headerlink" title="3. UserMapper.java &amp; UserMapper.xml"></a>3. <code>UserMapper.java</code> &amp; <code>UserMapper.xml</code></h2><ul>
<li>这里是<code>UserMapper.java</code>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuan.servlet.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chuan.servlet.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">getUser</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                 <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里是<code>UserMapper.xml</code>：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.chuan.servlet.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;table&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;table&quot;</span>/&gt;</span></span><br><span class="line">        (id, username, password)</span><br><span class="line">        VALUES (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;table&quot;</span>/&gt;</span></span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        UPDATE</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;table&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;table&quot;</span>/&gt;</span></span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">        ORDER BY id ASC</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;table&quot;</span>/&gt;</span></span><br><span class="line">        WHERE username = #&#123;username&#125; AND password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-UserService-java"><a href="#4-UserService-java" class="headerlink" title="4. UserService.java"></a>4. <code>UserService.java</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuan.servlet.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chuan.servlet.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.chuan.servlet.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(User loginUser)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">            <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUser(loginUser.getUsername(), loginUser.getPassword());</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            sqlSession.close();</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-LoginServlet-java-amp-LoginXxxServlet-java"><a href="#5-LoginServlet-java-amp-LoginXxxServlet-java" class="headerlink" title="5. LoginServlet.java &amp; LoginXxxServlet.java"></a>5. <code>LoginServlet.java</code> &amp; <code>LoginXxxServlet.java</code></h2><ul>
<li>这里是<code>LoginServlet.java</code>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuan.servlet.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chuan.servlet.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.chuan.servlet.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/loginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 封装User对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        loginUser.setUsername(username);</span><br><span class="line">        loginUser.setPassword(password);</span><br><span class="line">        <span class="comment">// 4. 调用UserService的login方法</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(loginUser);</span><br><span class="line">        <span class="comment">// 5. 判断User</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 登录失败</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/failServlet&quot;</span>).forward(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 登录成功</span></span><br><span class="line">            <span class="comment">// 先存储数据</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">            <span class="comment">// 再转发</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/successServlet&quot;</span>).forward(req, resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里是<code>LoginSuccessServlet.java</code>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuan.servlet.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chuan.servlet.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/successServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginSuccessServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) request.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 给页面写一句话</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;登录成功！&quot;</span> + user + <span class="string">&quot;，欢迎您。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里是<code>LoginFailServlet.java</code>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuan.servlet.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/failServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFailServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 给页面写一句话</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;登录失败，用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-sqlMapConfig-xml-amp-jdbc-properties配置文件"><a href="#6-sqlMapConfig-xml-amp-jdbc-properties配置文件" class="headerlink" title="6. sqlMapConfig.xml&amp;jdbc.properties配置文件"></a>6. <code>sqlMapConfig.xml</code>&amp;<code>jdbc.properties</code>配置文件</h2><ul>
<li>这里是<code>sqlMapConfig.xml</code>：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.chuan.servlet.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/chuan/servlet/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.chuan.servlet.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这里是<code>jdbc.properties</code>：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/practice_java?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=**网络加密**</span><br></pre></td></tr></table></figure>
<h2 id="7-login-html前端展示"><a href="#7-login-html前端展示" class="headerlink" title="7. login.html前端展示"></a>7. <code>login.html</code>前端展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet_learning/loginServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h2><ul>
<li>这里是<code>ServletTestDemo1.java</code>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuan.servlet.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletTestDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletDemo1 is initializing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, Servlet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletDemo1 is destroying...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里是<code>web.xml</code>：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.chuan.servlet.web.ServletTestDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这里是<code>index.jsp</code>：</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;JSP - Hello World&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--以下代码将置于Servlet的service()方法中--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(<span class="string">&quot;hello jsp&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--以下代码将置于Servlet类的定义成员的位置--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--以下代码将直接输出到页面上--%&gt;</span><br><span class="line">&lt;%= <span class="string">&quot;i = &quot;</span> + i %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里是<code>UserServiceTest</code>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuan.servlet.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chuan.servlet.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">// loginUser.setId(1);</span></span><br><span class="line">        loginUser.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        loginUser.setPassword(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(loginUser);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>WSL下安装MySQL</title>
    <url>/blog/2020/08/14/WSL%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<p>近期我在 Win10 中装了 WSL(Windows Subsystem for Linux)，又在学习 mysql，试图在 WSL(Ubuntu)中安装 mysql 进行命令行练习时，发现如下问题并解决。</p>
<span id="more"></span>
<h2 id="1-安装-mysql"><a href="#1-安装-mysql" class="headerlink" title="1. 安装 mysql"></a>1. 安装 mysql</h2><ol>
<li><code>apt-get install mysql-server mysql-client</code></li>
<li>此时试图在 shell 中进入<code>mysql</code>会报错如下：<br><code>ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/run/mysqld/mysqld.sock&#39; (2)</code></li>
</ol>
<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><p>使用如下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /var/run/mysqld</span><br><span class="line">sudo <span class="built_in">chown</span> mysql /var/run/mysqld/</span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure>
<h2 id="3-问题原因分析"><a href="#3-问题原因分析" class="headerlink" title="3. 问题原因分析"></a>3. 问题原因分析</h2><p>在 WSL 中，<code>/var/run/mysqld/mysqld.sock</code> 文件不存在。执行<code>vim /etc/mysql/my.cnf</code>将会看到如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The MySQL database server configuration file.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># You can copy this to one of:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- <span class="string">&quot;/etc/mysql/my.cnf&quot;</span> to <span class="built_in">set</span> global options,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- <span class="string">&quot;~/.my.cnf&quot;</span> to <span class="built_in">set</span> user-specific options.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># One can use all long options that the program supports.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run program with --<span class="built_in">help</span> to get a list of available options and with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--print-defaults to see <span class="built_in">which</span> it would actually understand and use.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># For explanations see</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># * IMPORTANT: Additional settings that can override those from this file!</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The files must end with <span class="string">&#x27;.cnf&#x27;</span>, otherwise they<span class="string">&#x27;ll be ignored.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">!includedir /etc/mysql/conf.d/</span></span></span><br><span class="line">!includedir /etc/mysql/mysql.conf.d/</span><br></pre></td></tr></table></figure>
<p>这里的 mysql 的配置在/etc/mysql/mysql.conf.d 目录下的 mysqld.cnf 文件，打开可以看到:<code>bind-address = 127.0.0.1</code> <code>socket = /var/run/mysqld/mysqld.sock</code> 等信息。</p>
<p>而 WSL 的/var/run 下面没有 mysqld 目录，如果执行上述解决方法中的命令，目录和 sock 文件就都有了。</p>
<p>此时再输入 mysql 即可进入 mysql 的命令环境：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">13</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.20</span><span class="number">-0</span>ubuntu0<span class="number">.20</span><span class="number">.04</span><span class="number">.1</span> (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2020</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates. <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
        <category>WSL</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>jupyter notebook中使用mayavi三维绘图库</title>
    <url>/blog/2020/12/08/jupyter%20notebook%E4%B8%AD%E4%BD%BF%E7%94%A8mayavi/</url>
    <content><![CDATA[<p>就像绘图时可使把 matplotlib 嵌入 jupyter 中一样，mayavi 也可以在 jupyter notebook 中嵌入式使用。</p>
<span id="more"></span>
<blockquote>
<p>注：以下假定已经安装好了 jupyter notebook 和 mayavi 库。</p>
</blockquote>
<h2 id="1-安装需要的-python-依赖"><a href="#1-安装需要的-python-依赖" class="headerlink" title="1. 安装需要的 python 依赖"></a>1. 安装需要的 python 依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ipywidgets ipyevents</span><br></pre></td></tr></table></figure>
<h2 id="2-进行设置"><a href="#2-进行设置" class="headerlink" title="2. 进行设置"></a>2. 进行设置</h2><p>命令行中输入以下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter nbextension install --py mayavi --user</span><br><span class="line">jupyter nbextension <span class="built_in">enable</span> --py mayavi --user</span><br></pre></td></tr></table></figure>
<h2 id="3-开始使用"><a href="#3-开始使用" class="headerlink" title="3. 开始使用"></a>3. 开始使用</h2><p>打开 jupyter notebook，在正式开始使用 mayavi 绘图前，调用<code>mayavi.mlab.init_notebook()</code>函数即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mayavi <span class="keyword">import</span> mlab</span><br><span class="line">mlab.init_notebook()</span><br></pre></td></tr></table></figure>
<p>此后，mlab 绘制出来的三维图即是内嵌于 jupyter 之中了，而且也可以用鼠标对其进行拖动旋转等操作。</p>
<p><img src="https://chua-n.gitee.io/figure-bed/blog/jupyter%20notebook中使用mayavi/jupyter效果图.png" alt=""></p>
]]></content>
      <categories>
        <category>python</category>
        <category>jupyter</category>
        <category>mayavi</category>
      </categories>
  </entry>
  <entry>
    <title>linux 下从源码安装 Python——小白踩坑记</title>
    <url>/blog/2020/06/29/linux%E4%BB%8E%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85python/</url>
    <content><![CDATA[<p>实验室服务器使用的系统为 Ubuntu 16.04，自带的 python 版本为 Python 2.7.12 和 Python 3.5.2，命令行下使用<code>$ python</code>命令来启动 python 时默认是 python2.7。而我想使用 Python 3.8，因此尝试从源码安装 Python，并更改默认的<code>$ python</code>命令指向。</p>
<span id="more"></span>
<blockquote>
<p>注：如果想要安装某个非系统自带的 Python 版本，切忌冲动删除系统自带的 Python 2.7 和 Python 3.5，某些系统应用可能依赖于这些 Python 环境的调用，防止系统出错！</p>
</blockquote>
<h2 id="1-官网下载-python-源码"><a href="#1-官网下载-python-源码" class="headerlink" title="1. 官网下载 python 源码"></a>1. 官网下载 python 源码</h2><p>在官网<a href="https://www.python.org/downloads/source/">这里</a>下载你想要的 linux 环境下的 python 源码，如我下载的是下图第一个 Gzipped source tarball，其实二选一就好。</p>
<p><img src="https://chua-n.gitee.io/figure-bed/blog/linux源码安装python/python源码包.png" alt="python源码.png"></p>
<p>我下载完成后是一个叫 Python-3.8.3.tgz 的文件，在下载目录里使用<code>tar -xvf Python-3.8.3.tgz</code> 命令解压文件包，目录里多出一个 Python-3.8.3 的文件夹，cd 命令进入该文件夹。</p>
<p>上述操作总结起来如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tgz</span><br><span class="line">tar -xvf Python-3.8.3.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.8.3</span><br></pre></td></tr></table></figure>
<h2 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h2><p>Python 源码编译、安装过程中需要用到一些工具，你的系统里可能有、可能没有这些工具，保险起见，使下以下命令先把这些依赖安装好吧。</p>
<blockquote>
<p>这一步其实可以放在最开始执行。</p>
</blockquote>
<ol>
<li>Ubuntu/Debian 系列： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl</span><br></pre></td></tr></table></figure></li>
<li>Fedora/CentOS/RHEL 等可参考： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel libffi-devel</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="3-编译并安装-python"><a href="#3-编译并安装-python" class="headerlink" title="3. 编译并安装 python"></a>3. 编译并安装 python</h2><p>注意根据第 1 节最后的 cd 命令，我们现在是在 python 的源码文件夹里进行操作。</p>
<h3 id="3-1-指定-python-的安装目录"><a href="#3-1-指定-python-的安装目录" class="headerlink" title="3.1. 指定 python 的安装目录"></a>3.1. 指定 python 的安装目录</h3><p>作为 CS 小白，我还是要区别一下 python 的“源码目录”和“安装目录”两个概念的，毕竟是第一次在 linux 下从源码安装软件。</p>
<p>要知道，当前我们所在的目录<code>Python-3.8.3</code>是由最开始下载的源码压缩包解压出来的，因此这个目录里是 python 这个软件开源的源码，故称之为<strong>源码目录</strong>；而<strong>安装目录</strong>是说我们这个 python 软件要安装在系统的哪个地方，你启动 python 的时候实际是从这里启动的。</p>
<p>类比下 windows 的话就是：源码目录是你下载的那个安装程序<code>xxx.exe</code>所在的目录，还记得一些大型软件（如 office 2016）安装的时候通常是一个文件夹里有一个<code>setup.exe</code>的程序吗（当然，很多软件你下载下来的安装包其实就一个单独的.exe 可执行文件就没了），windows 下就是直接点击这个<code>xxx.exe</code>进行安装的，这就是所谓的<strong>源码目录</strong>；那么显而易见，<strong>安装目录</strong>就是你在运行<code>xxx.exe</code>进行安装的时候选择的安装地址，譬如说经常是<code>C:\Program Files\</code>等等。真正的软件组件肯定是在安装目录里，软件需要从这里启动，而你平常习惯的在 windows 桌面/开始菜单里点击的图标就是从安装目录里延伸出的快捷方式。</p>
<p>回归主题，我选择的 python 安装目录是<code>/opt/python3.8</code>，因此通过如下命令先建立这个文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/python3.8</span><br></pre></td></tr></table></figure>
<h3 id="3-2-执行-configure"><a href="#3-2-执行-configure" class="headerlink" title="3.2. 执行./configure"></a>3.2. 执行./configure</h3><p>python 源码目录里有一个 configure 可执行文件，这个命令的作用是生成一个 MakeFile 文件，此 Makefile 文件用来被之后的 make 命令所使用进行源码编译（Linux 需要按照 Makefile 所指定的顺序来编译 (build) 程序组件）。</p>
<p>configure 通常有一些参数选项，最常见的是—prefix，用来指定安装目录。此外，要注意的是，python3.4 以后自带了 pip，为了在之后能够成功使用这个 pip 进行 python 库的安装，最好加上—with-ssl 参数。—with-ssl 这个参数不加的话 python 的安装过程不受影响，只是当你想要用 pip 安装 python 库的时候会报错，发现它无法连接到 pypi，跟 pip 连不上网没啥区别。</p>
<p>总之，使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --with-ssl --prefix=/opt/python3.8</span><br></pre></td></tr></table></figure>
<h3 id="3-3-make-编译"><a href="#3-3-make-编译" class="headerlink" title="3.3. make 编译"></a>3.3. make 编译</h3><p><code>make</code>命令实际就是编译源代码，其根据 Makefile 文件执行编译指令并生成可执行文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<h3 id="3-4-使用-make-install-进行安装"><a href="#3-4-使用-make-install-进行安装" class="headerlink" title="3.4. 使用 make install 进行安装"></a>3.4. 使用 make install 进行安装</h3><p>当 make 的源代码编译无误，使用<code>make install</code>就是进行软件的安装，似乎也要根据 Makefile 文件以及根据 make 生成的可执行文件进行执行，原理尚不明确，现在确定的是其现实意义是把软件安装到<code>configure</code>命令指定的目录，对我而言就是<code>/opt/python3.8</code>。</p>
<p><code>make install</code>因为是软件安装，因此通常需要 sudo 权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="4-配置环境"><a href="#4-配置环境" class="headerlink" title="4. 配置环境"></a>4. 配置环境</h2><p>至此 python 的安装过程其实已经完成，在安装目录里使用<code>./bin/python3</code>即可打开安装好的 python 可执行文件并进入 python 命令行了：</p>
<p><img src="https://chua-n.gitee.io/figure-bed/blog/linux源码安装python/python命令行.png" alt="启动python.png"></p>
<p>但是每次要从安装目录里启动 python 很不方便，我们想要达到的是在 shell 中随时随地唤醒这个 python，这便需要进行相关的环境配置。</p>
<h3 id="4-1-删除原有的软链接"><a href="#4-1-删除原有的软链接" class="headerlink" title="4.1. 删除原有的软链接"></a>4.1. 删除原有的软链接</h3><p>开头的时候提到，我的系统中默认的 python 命令打开的是系统自带的 python2.7，现在要更改这个命令让它打开的是新安装的 python3.8，这需要我们先理解命令行(shell)中的命令是怎么执行的：</p>
<ul>
<li>在 shell 中，执行的所有命令如 cd、ls、ps、python 等，分为“内建命令”和“外部命令”。<strong>内建命令</strong>是 shell 自带的命令，好比编程语言不需要使用函数库而自带的那些函数，如<code>print()</code>函数；<strong>外部命令</strong>是为了丰富 shell 的功能而自己安装的一些命令，好比你编程时使用的第三方库，当然，有些外部命令是你安装 linux 系统时就已经自带的命令，好比编程语言的标准库，虽然是“自带的”但依然是“外部命令”。</li>
<li>python 毫无疑问是外部命令，那么外部命令是怎么执行呢？这就要提到平常经常见到的<code>PATH</code>概念了。当 shell 中输入一个命令时，shell 首先检验它是不是内建命令，当内建命令中找不到这条命令时，shell 就搜索你的<code>PATH</code>，这个东西就是一个存储了你的外部命令所在路径的集合，shell 在这些路径中寻找你输入的命令对应的那个可执行文件，找得到就在 shell 中执行，找不到就报错。</li>
<li>于是，shell 中 python 命令的执行过程为：在<code>PATH</code>存储的那么路径里（包含很多路径，其中一个是<code>/usr/bin/</code>）寻找一个名为<code>python</code>的可执行文件，一般情况下，有这么一个文件：<code>/usr/bin/python</code>，找到它以后执行，就打开了 python。</li>
</ul>
<p>现在我们使用<code>ls -l /usr/bin/python</code>查看这个文件的详细信息，发现它是一个执行 python2.7 的软链接（相当于 windows 里的快捷方式），把它删掉，这样在 shell 中直接输入 python 就再也打不开任何 python 环境了，它成了一个无效命令。</p>
<p>总结一下，这步操作的命令过程为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /usr/bin/python</span><br><span class="line">sudo <span class="built_in">rm</span> /usr/bin/python</span><br></pre></td></tr></table></figure>
<h3 id="4-2-建立新的软链接"><a href="#4-2-建立新的软链接" class="headerlink" title="4.2. 建立新的软链接"></a>4.2. 建立新的软链接</h3><p>使用软链接创建命令<code>ln -s</code>把新安装的 python 链接到上步删除的旧的软链接所在目录即可。即：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /opt/python3.8/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure>
<p>此时在任意工作目录的 shell 中任意输入 python，即可打开新安装的 python 3.8 了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chuan@workstation:~$ python</span><br><span class="line">Python 3.8.3 (default, Jun 21 2020, 16:34:59)</span><br><span class="line">[GCC 5.4.0 20160609] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-配置-pip-命令"><a href="#4-3-配置-pip-命令" class="headerlink" title="4.3. 配置 pip 命令"></a>4.3. 配置 pip 命令</h3><p>你的系统可能也自带了 pip 或 pip2、pip3 等命令，由于自带的 pip 关联的肯定是原有的 python 环境，此时盲目使用 pip install 一些库的话，这些库其实被安装到了系统自带的 python 环境里了，在你新安装的 python3.8 里根本无法导入这些库，这就尴尬了。</p>
<p>这个 pip 其实和之前被删除的 python 软链接一样，是一个在相同目录下的 pip 软链接，和更改 python 命令一样，删除掉原来的 pip 被建立一个新的 pip 软链接即可。为了让 pip 关联的是新下载的 python3.8，新的 pip 应该来自 python3.8 自带的那个 pip，其路径为<code>./opt/python3.8/bin/pip3</code>。话不多说，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /usr/bin/pip</span><br><span class="line"><span class="built_in">ln</span> -s /opt/python3.8/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure>
<h2 id="5-前方告捷，嘿嘿"><a href="#5-前方告捷，嘿嘿" class="headerlink" title="5. 前方告捷，嘿嘿"></a>5. 前方告捷，嘿嘿</h2><h2 id="6-附记"><a href="#6-附记" class="headerlink" title="6. 附记"></a>6. 附记</h2><p>新安装的 pip 在安装第三方库时还是有一个小小的报错，提示什么文件夹权限不明确/不足以及：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Could not install packages due to an EnvironmentError: [Errno 13] Permission denied</span><br></pre></td></tr></table></figure>
<p>根据百度，出现这个报错之后，在 pip install 之后加个—user 可解决，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --user numpy</span><br></pre></td></tr></table></figure>
<p>第一次加过—user 之后便不再有报错，但不明所以的是这样之后 pip 安装的第三方库的目录被定在了<code>~/.local/</code>，原来似乎不存在这个文件夹。不过这并没有造成后续什么问题，暂且不管了，挖个坑后续再研究。</p>
<p>另外，不知道能不能选择直接把一个已安装的 pip 绑定到指定的 python 环境，而不用这么折腾，未完待续吧……</p>
]]></content>
      <categories>
        <category>python</category>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux 命令行下适配 nvidia 驱动</title>
    <url>/blog/2020/06/29/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E9%80%82%E9%85%8Dnvidia%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<p>疫情期间回不了学校，只能用 SSH 连接学校的服务器做试验，PyTorch 需要另一个版本的 cuda，只得在命令行下强装对应的 cuda 版本和 nvidia 驱动，于是有了这篇踩坑实录……</p>
<span id="more"></span>
<h2 id="1-下载相应驱动"><a href="#1-下载相应驱动" class="headerlink" title="1. 下载相应驱动"></a>1. 下载相应驱动</h2><p>在官网<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">这里</a>选择适应你 GPU 的驱动版本，在下载界面可用右键得到下载链接，然后在 linux 命令行下使用 wget 进行下载，如我下载的是 1080 Ti 的驱动版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.nvidia.cn/content/DriverDownload-March2009/confirmation.php?url=/XFree86/Linux-x86_64/440.82/NVIDIA-Linux-x86_64-440.82.run&amp;lang=cn&amp;<span class="built_in">type</span>=TITAN</span><br></pre></td></tr></table></figure>
<p>下载完成后是一个名为<code>NVIDIA-Linux-x86_64-440.82.run</code>的文件。此时若使用<code>sudo sh NVIDIA-Linux-x86_64-440.82.run</code>进行安装，会产生如下报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">You appear to be running an X server; please exit X before installing.</span><br></pre></td></tr></table></figure>
<p>这主要是由于通常而言你的电脑上已经有 nvidia 驱动并且在运行了，此时无法进行新驱动的安装，因为会影响依赖你现有驱动的应用的正常运行。比方说你的桌面程序就需要依靠现有的显卡驱动进行显示。</p>
<p>回到这个报错，百度了解到是有一个叫做 X 的进程服务在依赖着 nvidia 驱动的运行，这个 X 进程似乎就是支撑你的图形桌面的服务。使用<code>ps aux | grep X</code>命令可查看到这个正在运行的服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep X</span><br><span class="line">root      1459  0.0  0.0  15984   928 pts/40   S+   19:12   0:00 grep X</span><br><span class="line">root      1643  0.0  0.1 426836 187692 tty7    Ssl+ 10:43   0:15 /usr/lib/xorg/Xorg -core :0 -seat seat0 -auth /var/run/lightdm/root/:0 -nolisten tcp vt7 -novtswitch</span><br><span class="line">root      3604  0.0  0.0 387052 71108 tty8     Ssl+ 10:44   0:22 /usr/lib/xorg/Xorg -core :1 -seat seat0 -auth /var/run/lightdm/root/:1 -nolisten tcp vt8 -novtswitch</span><br><span class="line">git       3909  0.0  0.0  43732  4264 ?        Ss   10:44   0:03 dbus-daemon --fork --session --address=unix:abstract=/tmp/dbus-E2NLgH7XO1</span><br></pre></td></tr></table></figure>
<h2 id="2-关闭-X-服务"><a href="#2-关闭-X-服务" class="headerlink" title="2. 关闭 X 服务"></a>2. 关闭 X 服务</h2><p>为了能够安装新的 nvidia 驱动，我们需要关闭这个 X 服务，我的 Ubuntu 是基于 lightdm 类型的桌面系统，采用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/lightdm stop</span><br><span class="line">sudo /etc/init.d/lightdm status</span><br></pre></td></tr></table></figure>
<p>对于其他的 linux 版本，如果桌面系统是基于 gdm 类型，应该把命令中的 lightdm 改为 gdm 即可；非这两种桌面系统类型的，百度一下你的 linux 版本关闭 X 服务的相关命令吧。</p>
<p>关闭了 X 服务后图形桌面可能会关闭，因为我是通过 ssh 连接的服务器进行的操作，所以也没有看到具体的变化，不确定具体会发生什么情况，不过别慌就是了。</p>
<p>关闭 X 后，可再次用 ps 命令查看相关进程以确认，我这里显示如下，确实没有运行的 X 服务了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep X</span><br><span class="line">root      1656  0.0  0.0  15984  1084 pts/40   S+   19:15   0:00 grep X</span><br></pre></td></tr></table></figure>
<h2 id="3-卸载旧的驱动"><a href="#3-卸载旧的驱动" class="headerlink" title="3. 卸载旧的驱动"></a>3. 卸载旧的驱动</h2><p>终于可以卸载旧驱动了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get --purge remove nvidia-*</span><br><span class="line"><span class="comment"># 也有的说用下面的命令进行卸载，我个人均有尝试，无碍</span></span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;*nvidia*&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-安装新驱动"><a href="#4-安装新驱动" class="headerlink" title="4. 安装新驱动"></a>4. 安装新驱动</h2><p>在第 1 步下载的驱动文件目录里运行安装包即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh NVIDIA-Linux-x86_64-440.82.run</span><br></pre></td></tr></table></figure>
<p>值得一提的是，中间可能会有一些小的 warning 提示（好像还有一个 error？），但流程走下来最终还是提示 successfully complete，这就中了！使用<code>nvidia-smi</code>已经可以看到你的新驱动版本号（Driver Version）产生了变化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvidia-smi</span></span><br><span class="line">Sun Jun 21 19:16:54 2020</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 440.82       Driver Version: 440.82       CUDA Version: 10.2     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 108...  Off  | 00000000:02:00.0 Off |                  N/A |</span><br><span class="line">| 27%   35C    P5    24W / 250W |      0MiB / 11170MiB |      2%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|  No running processes found                                                 |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux 命令行下安装特定版本的 cuda (踩坑记录)</title>
    <url>/blog/2020/06/29/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E5%AE%89%E8%A3%85%E7%89%B9%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84cuda/</url>
    <content><![CDATA[<p>实验室服务器 Ubuntu 16.04 系统下原本安装的 cuda 版本是 9.0，硬件条件是一张 1080 Ti 的 GPU，在使用 PyTorch 的过程中想要把 cuda 版本换成 10.2，尝试了网上各种教程，无奈网络博客的质量实在是鱼目混珠，现在总结一下自己的踩坑记录，尽量详细地照顾到从头至尾的各个细节。</p>
<span id="more"></span>
<blockquote>
<p>其实可直接看第 4 步的总结……</p>
</blockquote>
<h2 id="1-走官网教程"><a href="#1-走官网教程" class="headerlink" title="1. 走官网教程"></a>1. 走官网教程</h2><p>首先想的当然是走官网的 cuda 安装教程啦，尝试了<a href="https://developer.nvidia.com/cuda-10.2-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=runfilelocal">官网页面</a>里的<code>runfile(local)</code>、<code>deb(local)</code>安装方式选项均失败，失败过程的详细说明如下：</p>
<h3 id="1-1-使用deb-local-方法（不推荐）"><a href="#1-1-使用deb-local-方法（不推荐）" class="headerlink" title="1.1. 使用deb(local)方法（不推荐）"></a>1.1. 使用<code>deb(local)</code>方法（不推荐）</h3><p>官网给的安装方式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-ubuntu1604.pin</span><br><span class="line">$ sudo <span class="built_in">mv</span> cuda-ubuntu1604.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line">$ wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class="line">$ sudo dpkg -i cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class="line">$ sudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get -y install cuda</span><br></pre></td></tr></table></figure>
<p>虽然服务器上已经有安装的 cuda 9.0，但此方法不需要先卸载老版本（大概是因为用的 apt-get 安装会自动覆盖吧），一路执行下来都没有报错，畅快地安装完成。然而，后又经过各种尝试后发现，在执行到最后一句<code>sudo apt-get -y install cuda</code>时，安装好的版本总是当前 NVIDIA 最新的 cuda 版本——截止到 2020.06.21 是 cuda 11.0，而我要安装的是 cuda 10.2（因为当前 PyTorch 只支持到 cuda 10.2）！</p>
<p>事实上，如果你要安装最新的 cuda 版本的话，这个方法非常好，安装流程到这里就可以结束了。</p>
<p>至于为什么总是安装的最新的 cuda 版本，而不是你以为的你指定的版本，大抵是因为最后那一句命令本质上还是用 apt 从软件源里下载 cuda，而软件源里的是最新版本所以你安装的也只能是最新版本吧。</p>
<h3 id="1-2-使用runfile-local-方法（推荐）"><a href="#1-2-使用runfile-local-方法（推荐）" class="headerlink" title="1.2. 使用runfile(local)方法（推荐）"></a>1.2. 使用<code>runfile(local)</code>方法（推荐）</h3><p>对于<code>runfile(local)</code>，官网给的安装方式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run</span><br><span class="line">$ sudo sh cuda_10.2.89_440.33.01_linux.run</span><br></pre></td></tr></table></figure>
<p>这个看上去靠谱多了，毕竟是下载到本地你指定的安装包然后直接在本地安装，但是在执行<code>sudo sh cuda_10.2.89_440.33.01_linux.run</code>发现依然报错，按其提示，用 cat 或 vim 查看相应的日志记录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[INFO]: Driver not installed.</span><br><span class="line">[INFO]: Checking compiler version...</span><br><span class="line">[INFO]: gcc location: /usr/bin/gcc</span><br><span class="line"></span><br><span class="line">[INFO]: gcc version: gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.12)</span><br><span class="line"></span><br><span class="line">[INFO]: Initializing menu</span><br><span class="line">[INFO]: Setup complete</span><br><span class="line">[INFO]: Components to install:</span><br><span class="line">[INFO]: Driver</span><br><span class="line">[INFO]: 440.33.01</span><br><span class="line">[INFO]: Executing NVIDIA-Linux-x86_64-440.33.01.run --ui=none --no-questions --accept-license --disable-nouveau --no-cc-version-check --install-libglvnd  2&gt;&amp;1</span><br><span class="line">[INFO]: Finished with code: 256</span><br><span class="line">[ERROR]: Install of driver component failed.</span><br><span class="line">[ERROR]: Install of 440.33.01 failed, quitting</span><br></pre></td></tr></table></figure>
<p>注意最后的<code>[ERROR]: Install of driver component failed.</code>，意思是驱动安装失败，我简直莫名奇妙。</p>
<p>找了找查看驱动相关的命令，使用<code>sudo dpkg --list | grep nvidia-*</code>命令查看了驱动版本号，发现竟然装了两个驱动版本！啥意思呢？就是原来我服务器上装的那个驱动，加上在上一步尝试<code>deb(local)</code>方法安装 cuda 时自动装的一个驱动，两个同时存在了。</p>
<blockquote>
<p>为啥 cuda 覆盖了而 nvidia 驱动没覆盖，难道是我记错了 w(ﾟ Д ﾟ)w ？不过这其实并不重要，反正无论一个/两个都要卸载。</p>
</blockquote>
<h2 id="2-解决驱动问题"><a href="#2-解决驱动问题" class="headerlink" title="2. 解决驱动问题"></a>2. 解决驱动问题</h2><p>为了这个专门写了篇博客，移步<a href="https://www.chua-n.com/2020/06/29/linux命令行下安装特定版本的cuda/">这里</a>。</p>
<h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h2><p>配置好 nvidia 驱动后，可以安装 cuda 了，先删除原有的 cuda，再对 1.2 节里下载的文件运行安装就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt autoremove cuda</span><br><span class="line"><span class="comment"># 若上一步删不干净，接着使用：</span></span><br><span class="line">sudo apt --purge remove <span class="string">&quot;*cublas*&quot;</span> <span class="string">&quot;cuda*&quot;</span></span><br><span class="line"><span class="comment"># 在 1.2 节之前下载的文件目录下运行：</span></span><br><span class="line">sudo sh cuda_10.2.89_440.33.01_linux.run</span><br></pre></td></tr></table></figure>
<p>按照安装过程中的提示一步步走下来即可，会让你选择安装的组件等等，像 nvidia samples 后面那几个组件我就没有装。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>简而言之，总的流程其实是：</p>
<ol>
<li>适配好你需要的 NVIDIA Driver(英伟达驱动)，参考<a href="https://www.chua-n.com/2020/06/29/linux命令行下安装特定版本的cuda/">这里</a>；</li>
<li>使用 1.2 节的<code>runfile(local)</code>方法先下载好相应的 cuda 版本；</li>
<li>按照第 3 节进行安装。</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>mayavi离屏渲染</title>
    <url>/blog/2020/12/07/mayavi%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<p>有时我们使用 mayavi 绘制一个 3D 图形，不需要在前台进行图形展示，而只是想随着程序的执行批量保存一些图片，这时候就需要配置好 mayavi 的后台离屏渲染功能了，以便关停烦人的图像弹窗。</p>
<span id="more"></span>
<h2 id="1-mlab-options-offscreen-之坑"><a href="#1-mlab-options-offscreen-之坑" class="headerlink" title="1. mlab.options.offscreen 之坑"></a>1. <code>mlab.options.offscreen</code> 之坑</h2><p>mayavi 虽然提供有一个直接的选项<code>mlab.options.offscreen</code>可以打开/关闭离屏渲染，但在实测中非常难用，linux 下在 python 脚本中设置<code>mlab.options.offscreen = True</code>根本不奏效。</p>
<p>笔者参照 <a href="http://docs.enthought.com/mayavi/mayavi/tips.html?highlight=offscreen">mayavi 官方文档</a>进行了大量尝试，最后在这里总结出比较好用的方案。</p>
<h2 id="2-关闭渲染弹窗"><a href="#2-关闭渲染弹窗" class="headerlink" title="2. 关闭渲染弹窗"></a>2. 关闭渲染弹窗</h2><p>解决方案是：建立一个虚拟的“显示器（X 服务）”，在虚拟的服务上进行图形渲染。具体地，可以有两种选择：</p>
<ol>
<li>结合 linux 的 xvfb-run 命令运行编写好的 python 脚本： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xvfb-run ... x24&quot;会开启一个相应分辨率的虚拟屏幕</span></span><br><span class="line"><span class="comment"># 后面再结合一个具体的命令便可在开启的虚拟屏幕上运行该命令</span></span><br><span class="line"><span class="comment"># 这里执行的便是让python运行一个mayavi绘图脚本的命令</span></span><br><span class="line">xvfb-run --server-args=<span class="string">&quot;-screen 0 1024x768x24&quot;</span> python my_mayavi.py</span><br></pre></td></tr></table></figure></li>
<li>通过 python 脚本内部进行类似上述设置，此时需引入第三方库 PyVirtualDisplay： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</span><br><span class="line"><span class="comment"># 开启一个分辨率为1280*1024的虚拟屏幕</span></span><br><span class="line">display = Display(visible=<span class="literal">False</span>, size=(<span class="number">1280</span>, <span class="number">1024</span>))</span><br><span class="line"><span class="comment"># 启动该屏幕</span></span><br><span class="line">display.start()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>此后必然无法再在脚本运行的过程中看到渲染的图形弹窗，需要使用<code>mlab.savefig()</code>命令把后台渲染出的图像保存下来再在其他地方进行查看。</p>
<h2 id="3-推荐方案"><a href="#3-推荐方案" class="headerlink" title="3. 推荐方案"></a>3. 推荐方案</h2><p>这里推荐解决方案中的第 2 种，因为其更通用也更优雅和方便。不过，仅仅进行上述设置会导致<code>mlab.savefig()</code>命令存储下来的图片就是一个黑屏（你生成的虚拟 X 服务对应的黑屏），正确操作应该同时把 mlab.options.offscreen 设置为 True，才能正确地保存你的图形。所以，干脆直接在脚本中加入以下命令吧：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</span><br><span class="line">display = Display(visible=<span class="literal">False</span>, size=(<span class="number">1280</span>, <span class="number">1024</span>))</span><br><span class="line">display.start()</span><br><span class="line"><span class="keyword">from</span> mayavi <span class="keyword">import</span> mlab</span><br><span class="line">mlab.options.offscreen = <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>为了方案的“移值性”更强，建议直接将上述命令保存成一个 python 模块，以后每次希望离屏渲染时从这个模块中导入 mlab，不希望离屏渲染时则仍旧从 mayavi 中导入 mlab。如，笔者将其打包为<code>mayaviOffScreen.py</code>文件，并添加了一些注释：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Render the mayavi scene off screen.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">When you don&#x27;t need display the mayavi scene while running python scripts,</span></span><br><span class="line"><span class="string">importing `mlab` from this module is recommended, i.e.,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from mayaviOffScreen imoprt mlab</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Notes:</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">    1. If you are using mayavi from remote host by SSH, etc, you must</span></span><br><span class="line"><span class="string">        import `mlab` from this module. Or something wrong happens!</span></span><br><span class="line"><span class="string">    2. Under the circumstance above, if you need import some other modules meanwhile</span></span><br><span class="line"><span class="string">        and those modules import `mlab` as well in themselves, make sure the sentence</span></span><br><span class="line"><span class="string">        `from mayaviOffScreen import mlab` appears before `import otherModule`!</span></span><br><span class="line"><span class="string">        So that `mayaviOffScreen.mlab` covers `otherModule.mlab`.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</span><br><span class="line"></span><br><span class="line">display = Display(visible=<span class="literal">False</span>, size=(<span class="number">1280</span>, <span class="number">1024</span>))</span><br><span class="line">display.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mayavi <span class="keyword">import</span> mlab</span><br><span class="line">mlab.options.offscreen = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Set mlab.options.offscreen=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(mlab.options.offscreen))</span><br></pre></td></tr></table></figure>
<p>以后每次需要离屏渲染时，把这个文件复制到项目文件夹，然后使用<code>from mayaviOffScreen import mlab</code>命令代替正常情况下的<code>from mayavi import mlab</code>即可。</p>
<h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol>
<li>在具体执行 mayavi 绘图脚本时，可能你导入的其他模块（<code>import othermodule</code>）中事实上存在<code>from mayavi import mlab</code>语句，如果在你的执行脚本中<code>import othermodule</code>语句先于<code>from mayaviOffScreen import mlab</code>出现，那么依然会导致离屏渲染失败。因此，最好令这条离屏渲染语句<code>from mayaviOffScreen import mlab</code>作为你的执行模块的第一条语句。</li>
<li>通过虚拟 X 服务渲染图形后，可不要再调用<code>mlab.show()</code>命令了，因为这意味着你进入和图形交互的状态，而这个“图形框”是虚拟的，你看不到摸不着，也就无法像正常那样通过关闭图形框来让<code>mlab.show()</code>命令停止了，于是你这个相应的脚本进入无限等待的阻塞状态，只有关闭相关进程才能将其终止。</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
        <category>mayavi</category>
      </categories>
  </entry>
  <entry>
    <title>使用 python 绘制不同尺寸的球——利用Mayavi库</title>
    <url>/blog/2020/12/22/python%E7%BB%98%E5%88%B6%E4%B8%89%E7%BB%B4%E7%90%83/</url>
    <content><![CDATA[<p>“万恶”的 mayavi 库，琢磨了老半天，才弄清楚怎么根据给定的球心坐标和半径批量绘制出三维空间的球。</p>
<span id="more"></span>
<h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h2><p>mayavi 的 mlab 类似 matplotlib 的 pyplot, 其中<code>points3d</code>函数用来绘制一些三维空间的离散点，在实际情况中，一个点必然需要一种“表示方式”，在<code>points3d</code>函数中，提供了<code>&quot;sphere&quot;, &quot;point&quot;, &quot;cylinder&quot;, &quot;cone&quot;, &quot;cube&quot;, &quot;2darrow&quot;, &quot;2dcircle&quot;</code>等很多模式，即用“球、点、圆柱、圆锥、方块、二维箭头、二维圆”等来表示一个点，当选择<code>&quot;point&quot;</code>时，往往可能由于点的可视感太低而显示出来的结果“啥都没有”，所以此函数默认的图例模式为<code>&quot;sphere&quot;</code>。由此引发感想，若可控制每个球的大小，那么不就可以用这些球来表示出自己想画的一些球了嘛。</p>
<p>于是通过研究<code>mlab.points3d()</code>函数发现，可以传入若干球的球心坐标对应的<code>x,y,z</code>，以及相应的半径<code>r</code>，然后设置好<code>scale_factor</code>、<code>resolution</code>、<code>mode</code>参数即可。这三个参数和<code>r</code>参数的说明如下：</p>
<ol>
<li><code>scale_factor</code>：缩放因子，mayavi 的<a href="http://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html#mayavi.mlab.points3d">官方文档</a>说得很含糊，其到底怎么发挥作用的完全没有说清楚，这里经过多次试验总结为：将其设置为<code>scale_factor=1</code>的话，即会按传入的“大小参数”<code>r</code>进行一比一缩放，这个参数可视为不存在。</li>
<li><code>resolution</code>：每一个点（球）的解析度/分辨率，为整数，默认值为 8，默认值为 8 时可明显看出用球表示点时球有“棱角”，这里将其设置为 30。<br><img src="https://chua-n.gitee.io/figure-bed/blog/python绘制三维球/1.png" alt=""><br><img src="https://chua-n.gitee.io/figure-bed/blog/python绘制三维球/2.png" alt=""><blockquote>
<p>观察这里的坐标，显然，<code>resolution</code>参数还会一定程度上影响计算的精度吧，毕竟表面是计算后渲染出来的！咳，这点以后再说吧，目前只是需要绘制图形效果。</p>
</blockquote>
</li>
<li><code>mode</code>：其实可以不设置，默认情况即是用 sphere 作为点的的图例，这里拿出来只是作为强调，应该设置为<code>mode=&quot;sphere&quot;</code>。</li>
<li><code>r</code>：按照官方文档，严格来说这不是<code>r</code>参数，其形参名为<code>s</code>，但不管叫什么，它就是表示<code>points3d</code>函数绘制出来的点的大小的一个参数。这里经过多次试验，发现它的数值表示的“大小含义”，对于<code>mode=&quot;sphere&quot;</code>来说就是球的直径，对于<code>mode=&quot;cube&quot;</code>来说就是立方体的边长，对于<code>mode=&quot;cone&quot;</code>来说就是圆锥的高，对于<code>mode=&quot;cylinder&quot;</code>来说就是圆柱的高。概括而言，在内部实现中，这种对应关系是否有统一理论指导其代码实现尚不得而知。</li>
</ol>
<h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><p>这样绘制你的球：<code>mlab.points3d(x, y, z, r*2, scale_factor=1, resolution=30)</code></p>
<h2 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h2><p>设置一个位于原点的单位球，然后在其上、下、左、右、前、后再各放置 1 个球，检验他们的相切情况。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mayavi <span class="keyword">import</span> mlab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">points = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                   [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">                   [-<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">                   [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                   [<span class="number">0</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                   [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0.5</span>],</span><br><span class="line">                   [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">0.5</span>]])</span><br><span class="line"></span><br><span class="line">x, y, z, r = points[:, <span class="number">0</span>], points[:, <span class="number">1</span>], points[:, <span class="number">2</span>], points[:, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">mlab.points3d(x, y, z, r*<span class="number">2</span>, scale_factor=<span class="number">1</span>, resolution=<span class="number">30</span>, mode=<span class="string">&quot;sphere&quot;</span>)</span><br><span class="line">mlab.outline()</span><br><span class="line">mlab.axes()</span><br><span class="line">mlab.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://chua-n.gitee.io/figure-bed/blog/python绘制三维球/3.png" alt=""><br><img src="https://chua-n.gitee.io/figure-bed/blog/python绘制三维球/4.png" alt=""><br><img src="https://chua-n.gitee.io/figure-bed/blog/python绘制三维球/5.png" alt=""></p>
<h2 id="4-附录"><a href="#4-附录" class="headerlink" title="4. 附录"></a>4. 附录</h2><h3 id="4-1-我本来想要画的球堆积颗粒模型："><a href="#4-1-我本来想要画的球堆积颗粒模型：" class="headerlink" title="4.1. 我本来想要画的球堆积颗粒模型："></a>4.1. 我本来想要画的球堆积颗粒模型：</h3><p><img src="https://chua-n.gitee.io/figure-bed/blog/python绘制三维球/6.png" alt=""></p>
<h3 id="4-2-原本我采用的绘球函数："><a href="#4-2-原本我采用的绘球函数：" class="headerlink" title="4.2. 原本我采用的绘球函数："></a>4.2. 原本我采用的绘球函数：</h3><p>若要在一张图上绘制很多球的话，这种方式只能使用 for 循环一个球一个球地进行绘制，效率比较低，硬件成本也比较高。也是为此一直在研究<code>points3d</code>函数的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plotter</span>:</span><br><span class="line">    random.seed(<span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomColor</span>(<span class="params">cls</span>):</span><br><span class="line">        color = (random.random(), random.random(), random.random())</span><br><span class="line">        <span class="keyword">return</span> color</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sphere</span>(<span class="params">cls, center, radius, nPoints=<span class="number">100</span>, opacity=<span class="number">1.0</span>, color=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Draw a sphere according to given center and radius.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Parameters:</span></span><br><span class="line"><span class="string">        -----------</span></span><br><span class="line"><span class="string">        center(tuple): (x, y, z) coordinate</span></span><br><span class="line"><span class="string">        radius(float): radius of the sphere</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        u = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, nPoints)</span><br><span class="line">        v = np.linspace(<span class="number">0</span>, np.pi, nPoints)</span><br><span class="line">        x = radius * np.outer(np.cos(u), np.sin(v)) + center[<span class="number">0</span>]</span><br><span class="line">        y = radius * np.outer(np.sin(u), np.sin(v)) + center[<span class="number">1</span>]</span><br><span class="line">        z = radius * np.outer(np.ones(np.size(u)), np.cos(v)) + center[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">from</span> mayavi <span class="keyword">import</span> mlab</span><br><span class="line">        color = cls.randomColor() <span class="keyword">if</span> color <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> color</span><br><span class="line">        scene = mlab.mesh(x, y, z, color=color, opacity=opacity)</span><br><span class="line">        <span class="keyword">return</span> scene</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>mayavi</category>
      </categories>
  </entry>
  <entry>
    <title>亲爱的乔乔</title>
    <url>/blog/2015/07/29/%E4%BA%B2%E7%88%B1%E7%9A%84%E4%B9%94%E4%B9%94/</url>
    <content><![CDATA[<blockquote>
<p>小武写给乔乔的话——2015/07/29。</p>
</blockquote>
<span id="more"></span>
<p>暑假在床上坐着看闲书，看着书中男主对生病的女主那样细腻的描写，我看了看卧在床下的你，屁股对着我，便叫了你一声——“乔！”你淡定的回过头看了看我，象征性的摇了摇尾巴，便让我有了写一下你的想法。</p>
<h2 id="1-初遇"><a href="#1-初遇" class="headerlink" title="1. 初遇"></a>1. 初遇</h2><p>你是在我上初中时来到我家的，应该是初一的一个假期里，这样子算的话，你应该有六七岁了吧，也算是中老年狗啦！</p>
<p>你是胖胖姥姥家的宝宝和魂儿生的狗仔，都是平常老百姓家养的狗，根本说不上什么品种，就是纯杂种狗吧，当时还嫌你是母的，怕你以后乱跑，生小狗，没办法处理，可是公的都被要走了，只剩下了你。</p>
<p>刚来的时候你刚断奶，吃的胖乎乎圆滚滚的，还很小，一只手就能把你抱起。浑身黑色的毛，两只眼睛上面有两个白色的圆点，嘴巴及身体内侧是白色，还有四肢，最可爱的是你下巴长毛的地方又有一点黑，简直太可爱。你刚到陌生环境，晚上一直不安的哇哇乱叫，还用爪子挠我房门，终于被你吵醒，给你打开门，抱你进屋，打开一袋零食嚼碎了一点一点喂你，真的就像在照顾一个 Baby~</p>
<p>那时候具体的样子记不得了，因为没有给你拍过照片，唯一比较深的印象就是给你起的名字吧，乔乔，和你长得一样可爱，我给你起的哦！</p>
<h2 id="2-长大后"><a href="#2-长大后" class="headerlink" title="2. 长大后"></a>2. 长大后</h2><p>后来，我们都长大了，你也渐渐大到得用两个手抱你，大到熟悉了你的名字，以及一些话语。一开始想用链子拴着你，后来你太渴望自由了，总是自己用“缩头神功”从链子下跑掉，只好作罢；再后来你甚至要挣脱整个院子的束缚，一逮住机会就往外面跑，开始几次还担心你，怕你找不到回家的路，后来你真的是野惯了，于是，你肚子被搞大了-_-</p>
<p>第一窝小狗崽是在冬天生的，你估计是没经验，最后一只生了好久，不过还是夭折了；已经记不清楚小狗送给谁了；第二窝最漂亮，也拍了很多照片；第三窝是两只白色的，一只后来便生病死了；最后一窝就是去年暑假我高考完后回来，两只黑色的，都送了人。养母狗的痛苦之处其实是在于，生了一堆可爱的小狗狗，我看着它们从学会爬，到睁眼，到一跳一跳的抢食物、玩耍，那可爱的小圆球们简直萌瞎我的眼，最后却不能养下去，而是得送给别人，从此生死未卜，而且总是感觉那些人都不会有自己照顾的好，狗狗会被欺负…每次送人狗仔，都是这样痛苦的心情。</p>
<p>而乔乔你，真是没有一点母性光辉呐！好像压根就不关心你的狗仔，你长的也不太大，真担心你奶水不足，饿着狗崽；喂它们点好吃的吧，你还厚着脸皮跟小狗抢，有你这样当妈的嘛！真受不了你~~~</p>
<h2 id="3-生活"><a href="#3-生活" class="headerlink" title="3. 生活"></a>3. 生活</h2><p>你还是很聪明的，虽然我们没有那个心思去训练你什么，你知道自觉往花池里面大小便，虽然经常会整个身子都在土里面，只露出个屁股在外面，把尿完好无损的尿到了外面，真傻乎乎的；刚开始不喜欢洗澡，后来终于感受到了洗澡的好处，再洗时就不用费劲按住你了；还有察言观色，我们在家你就敢进屋，只有大人在家时你就不敢进屋了。</p>
<p>你的待遇实在不能算是宠物的级别，最多算是家畜吧，不过也该比其他一些在平民家的狗要好一些，至少有自己的名字，至少不会饿着；但我还是觉得你肯定活得不是那么开心。</p>
<p>大人们肯定只是把你当做一条狗来对待，喂你不会喂得很好，能看家就行，名字是无所谓的，更多的是烦你随地大小便，有客人来了也乱叫，狗毛到处飞，什么的；而我们小孩，在大人的基础上会对你好一点，一时兴起还会早上起来遛你一圈，把你乐得找不着北，但我们也是自私的，只有当自己的物质和精神满足后，才会想到你；我平日里上学，跟同学们玩，我的世界里有很多很多人，只有所有人都不理我时，我才能想到你，才会想到去逗你玩一下，而你，全部的世界只有我一个人。</p>
<h2 id="4-你喜欢的"><a href="#4-你喜欢的" class="headerlink" title="4. 你喜欢的"></a>4. 你喜欢的</h2><p>你年轻的时候啊，特别有活力，喜欢玩球，能弹跳的球，乒乓球都不知被你咬坏了多少，你跟着弹起来的球爪子一上一下一前一后的样子真是太可爱了！还有自己玩空瓶子，咬来咬去，再不小心踢飞，然后飞速跑过去咬，又跑又跳的，看上去玩的真是不亦乐乎呢。然而你也只能玩些这种游戏吧，苦中作乐？不知道你是怎么想的，反正如果我是你的话，肯定无聊死了天天。偶尔我们一时兴起，会跟你在院子里玩一会儿，无非就是追着跑来跑去，你飞奔的样子可真是卖命，绕着院子无尽的转圈啊转圈，腿又短，跳阶梯的时候还摔倒过，真是滑稽，哦对了，你高兴起来总是会咬自己的尾巴，然后咬不到，团团转啊团团转~你还特别喜欢我们抚摸你，哪怕用脚蹭两下，你也会顺势倒下四脚朝天，期待更多的触摸，可惜你身上很脏，每次动完你都得洗手，所以我们也并不经常满足你。</p>
<p>这几年你老了，便不再那么疯，但还是本性不改，每次拿出链子要去遛你，你总是开心的快要疯掉，明明是你在遛我，拽着我往前走；每次久别重逢，你总是快要把尾巴摇掉来欢迎我，每天早上我从我屋里出去，你总是会赶紧上前欢迎，送我到厕所，再在厕所门口等我出来，然后继续在我前面摇着尾巴低着耳朵开路。你的叫声依旧很响亮，听上去像条凶猛的大狗一样；你的样子似乎没变，一身黑毛，身体内侧是白色，夹杂着些许黄色。你还是仇恨于小麻雀们落到院子上，每次都能冲出去把它们吓跑~此刻你正在我脚下，舔来舔去，调戏我的脚，想让我摸摸你，你真的是非常渴求陪伴啊，可是，我不在家的那么多日子里，谁来陪你呢？</p>
<p>你喜欢吃我喜欢吃的，苹果西瓜面条玉米红薯馒头黄瓜西红柿……当然少不了你的骨头，而你真的是很馋很馋，一旦有肉吃，你立马就不吃水果蔬菜了，看你那馋样儿，真想饿上你几天，看你吃不吃饭！可爱的样子是当你看到我手上拿着好吃的时，或者隔了几个房间都能灵敏的听到我悄悄撕开零食包装时，立马站起来跑到我面前摇着尾巴，伸出舌头舔一圈嘴巴，睁着个大眼睛满眼的期待，都不忍心不喂你了~</p>
<h2 id="5-你在想什么呢"><a href="#5-你在想什么呢" class="headerlink" title="5. 你在想什么呢"></a>5. 你在想什么呢</h2><p>更多的时候你是静卧，可能真的是太无聊了吧，家里的人上学的挣钱的，谁会天天逗你玩呢。你似是早已习惯了这种孤单，总是一个狗，去那儿卧一会儿，来这儿趴一会儿，我在家时你总是来到我身边，看看我，见我在忙，你就默默的趴到地板上，有时鼻子还出一口气，听上去像是在叹气。最无语的是有一次某个早晨，我睁了一下迷糊的双眼，床头边赫然探出一个狗头来！真是把我吓得够呛~</p>
<p>你要是会说话就好啦，我常常这样想。你总是默不作声，当我陪着你的时候，我常常有很多心事，一边逗你玩一边发呆，你也总是看看我，不说话，我有时候还会问你这问你那，可惜你都不会回答。你现在又把屁股朝着我，小脑袋放到前爪上卧着了。你无聊的时候都是想些什么呢？会想我吗？当我不在家的时候，会想到生老病死这些狗生哲理吗？我离开的时候你会难过吗？你晚上会做梦吗？会梦到我吗？</p>
<hr>
<p>遗憾的是，我不能陪你很久了……在家的每时每刻都让我想离开——当然不是因为你，愿你每日开心，愿下生能再遇见。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>小武</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/blog/2021/02/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>最近学到 Spring 的 AOP，发现以前没搞懂的“JDK 动态代理”终于过来找茬了，所以还是细细地疏理一下吧。</p>
<span id="more"></span>
<h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1. 代理模式"></a>1. 代理模式</h2><p>碰见一个新概念，第一要做的还是要“顾名思义”：模式二字自不必说，所谓“代理”，即当某个目标对象不能被直接使用时，给这个目标对象提供一个“代办人”（代天行道），以便代替目标对象发挥其本来的功能。当然，在这个过程中“代理对象”通常会对“目标对象”进行一些改造升级，而不是单纯的复制。</p>
<p>另一方面，从行为表现上来说，代理其实也可想像为“接口”和“实现类”的关系：接口就是目标对象，相应的实现类就是接口的代理。在 Java 中不能创建接口的实例，而只能创建实现这个接口的类的实例，所以“接口”这个概念虽然不是为代理模式而生的，但它天然就是代理的模式。类似的，其实也可想像为类继承中“基类”和“子类”的关系。</p>
<p>对于 Java 来说，代理模式在代码实现上可以分为<strong>静态代理</strong>和<strong>动态代理</strong>。</p>
<h2 id="2-静态代理"><a href="#2-静态代理" class="headerlink" title="2. 静态代理"></a>2. 静态代理</h2><p>静态代理其实没啥好说的，实际就是通常写代码的方式，将代理对象直接在代码中显示构造出来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标对象/目标类/被代理类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要编写实现类，即“代理类”</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Turtle</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am an animal, named turtle.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// proxyAnimal是Turtle类的实例，但在Java中可自动向上转型为Animal接口</span></span><br><span class="line">        <span class="comment">// 故而可以说proxyAnimal为Animal的代理</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">proxyAnimal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Turtle</span>(); <span class="comment">// 显示构造出代理对象proxyAnimal</span></span><br><span class="line">        <span class="comment">// 调用代理对象的info方法</span></span><br><span class="line">        proxyAnimal.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-动态代理"><a href="#3-动态代理" class="headerlink" title="3. 动态代理"></a>3. 动态代理</h2><h3 id="3-1-JDK-代理"><a href="#3-1-JDK-代理" class="headerlink" title="3.1. JDK 代理"></a>3.1. JDK 代理</h3><p>Java 标准库提供了一种动态代理的机制：可以在运行期动态创建某个<strong>接口</strong>的实例，也即为这个接口创建代理对象。</p>
<p>具体地，java.lang.reflect 包下提供了一个<code>Proxy</code>类和一个<code>InvocationHandler</code>接口，Java 利用它们生成 JDK <strong>动态代理类</strong>或<strong>动态代理对象</strong>，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标对象/目标类/被代理类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要先定义一个InvocationHandler类型的handler，其处理（改造）目标对象的每个方法</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I am an animal, named turtle.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接生成动态代理对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">proxyAnimal</span> <span class="operator">=</span> (Animal) Proxy.newProxyInstance(</span><br><span class="line">                Animal.class.getClassLoader(), <span class="comment">// 接口实现类（即代理对象所属类）的类加载器</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Animal.class&#125;, <span class="comment">// 代理类要实现的接口（们）</span></span><br><span class="line">                handler); <span class="comment">// 改造目标对象方法的InvocationHandler实例</span></span><br><span class="line">        <span class="comment">// 调用代理对象的info方法</span></span><br><span class="line">        proxyAnimal.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结而言，创建 JDK 动态代理对象的过程如下：</p>
<ul>
<li><p>定义一个<code>InvocationHandler</code>实例，它负责实现接口（即被代理的目标）的方法调用；</p>
<blockquote>
<p><code>InvocationHandler</code>本身也是一个接口，需要定义它的实现类，其中需要重写<code>invoke()</code>方法。调用代理对象的所有方法时都会被替换成调用该<code>invoke()</code>方法，其函数签名为：<code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable</code></p>
</blockquote>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">proxy</td>
<td style="text-align:center">代表动态代理对象</td>
</tr>
<tr>
<td style="text-align:center">method</td>
<td style="text-align:center">代表正在执行的方法</td>
</tr>
<tr>
<td style="text-align:center">args</td>
<td style="text-align:center">代表调用目标方法时传入的实参</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>通过<code>Proxy.newProxyInstance()</code>创建 interface 实例；</p>
<blockquote>
<p>其函数签名为<code>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler handler)</code>，它需要 3 个参数：</p>
</blockquote>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">loader</td>
<td style="text-align:center">定义这个代理类的类加载器（通常就是接口类的 ClassLoader）</td>
</tr>
<tr>
<td style="text-align:center">interfaces</td>
<td style="text-align:center">代理类将要实现的接口数组（至少需要传入一个接口进去）</td>
</tr>
<tr>
<td style="text-align:center">h</td>
<td style="text-align:center">用来处理接口方法调用的 InvocationHandler 实例</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>将<code>Proxy.newProxyInstance()</code>返回的 Object 强制转型为接口。</li>
</ul>
<p>除直接创建动态代理对象外，Java 还可先创建动态代理类，而后通过动态代理类再创建动态代理对象，此时调用的是<code>Proxy.getProxyClass()</code>方法，其完整函数签名为<code>static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces)</code>，形参含义同上。不过，即使采用这种方式生成动态代理类之后，如果程序需要通过该代理类来创建对象，依然需要传入一个<code>InvocationHandler</code>对象。</p>
<h3 id="3-2-cglib-代理"><a href="#3-2-cglib-代理" class="headerlink" title="3.2. cglib 代理"></a>3.2. cglib 代理</h3><p>cglib 代理不依赖于接口，而是基于基类/子类。暂略……</p>
<h2 id="4-动态代理的优势应用"><a href="#4-动态代理的优势应用" class="headerlink" title="4. 动态代理的优势应用"></a>4. 动态代理的优势应用</h2><p>仅看上面定义式的描述，实在很难看出动态代理的优势，而实际上动态代理在解耦方面具有重要应用。例如：</p>
<h3 id="4-1-解耦合"><a href="#4-1-解耦合" class="headerlink" title="4.1. 解耦合"></a>4.1. 解耦合</h3><p>对于如下图 18.4 的软件系统，工程中出现大量重复代码段是相当糟糕的情况，大部分<strong>稍</strong>有经验的开发者都会将其中深色代码段定义成一个方法，然后让另外三段代码段直接调用该方法即可，如下图 18.5。</p>
<p><img src="https://chua-n.gitee.io/figure-bed/blog/代理模式/1.png" alt="图 18.4"><br><img src="https://chua-n.gitee.io/figure-bed/blog/代理模式/2.png" alt="图 18.5"></p>
<p>然而，采用这种方式来实现代码复用依然产生一个重要问题：代码段 1、代码段 2、代码段 3 和深色代码段分离开了，但代码段 1、代码段 2、代码段 3 又和一个特定方法耦合了！最理想的效果是：代码段 1、2、3 既可以执行深色代码部分，又无须在程序中以硬编码方式直接调用深色代码的方法，这时就可以通过动态代理来达到这种解耦效果。如下面的代码，一些重要的理念也包含在注释中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于JDK动态代理只能为接口创建动态代理，所以先提供一个Dog接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于接口不可能提供实现，如果直接使用Proxy为Dog接口创建动态代理对象，</span></span><br><span class="line"><span class="comment">// 那动态代理对象的所有方法的执行效果又将完全一样，故而实际情况通常是：</span></span><br><span class="line"><span class="comment">// 该Dog接口总会提供一个/多个实现类，比如这里的GunDog类</span></span><br><span class="line"><span class="comment">// 此类中定义两个方法来代表上述所谓的代码段1、代码段2，目标是希望这两段代码能够跟某个公共代码松耦合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GunDog</span> <span class="keyword">implements</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一只猎狗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我奔跑迅速&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义通用方法，即代码段1、2的公共代码段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 第一个拦截器方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------模拟通用方法1---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个拦截器方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------模拟通用方法2---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序的关键</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 需要被代理的目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行动态代理对象的所有方法时，都会被替换成执行如下的invoke()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DogUtil</span> <span class="variable">du</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DogUtil</span>();</span><br><span class="line">        du.method1();</span><br><span class="line">        <span class="comment">// 通过反射以target作为主调来执行method方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args); <span class="comment">// 关键</span></span><br><span class="line">        du.method2();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供一个代理工厂类，专门为指定的target生成动态代理实例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>();</span><br><span class="line">        handler.setTarget(target);</span><br><span class="line">        <span class="comment">// 创建并返回一个target的动态代码对象，它与target实现了相同的接口</span></span><br><span class="line">        <span class="comment">// 故而动态代理对象可以当作target对象使用，即实现了对target对象的代理</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                handler</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个原始的GunDog对象，作为target</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GunDog</span>();</span><br><span class="line">        <span class="comment">// 以指定的target来创建动态代理对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) MyProxyFactory.getProxy(target);</span><br><span class="line">        <span class="comment">// info()和run()两个代码段既实现了对method1()、method2()通用方法的插入</span></span><br><span class="line">        <span class="comment">// 同时在这两个代码段的定义代码——GunDog类的两个方法——中，又没有以硬编码方式调用method1()、method2()方法</span></span><br><span class="line">        dog.info();</span><br><span class="line">        dog.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-已有方法的动态增强"><a href="#4-2-已有方法的动态增强" class="headerlink" title="4.2. 已有方法的动态增强"></a>4.2. 已有方法的动态增强</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>(); <span class="comment">//目标对象</span></span><br><span class="line">        <span class="type">Advice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Advice</span>(); <span class="comment">// 增强对象</span></span><br><span class="line">        <span class="type">TargetInterface</span> <span class="variable">proxy</span> <span class="operator">=</span> (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), <span class="comment">// 目标对象的类加载器</span></span><br><span class="line">                target.getClass().getInterfaces(), <span class="comment">// 目标对象相同的接口字节码对象数组</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="comment">// 调用代理对象的任何方法，实质执行的都是invoke方法</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        advice.before();</span><br><span class="line">                        method.invoke(target, args);</span><br><span class="line">                        advice.afterReturning();</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>余数——周期性和分组</title>
    <url>/blog/2021/06/17/%E4%BD%99%E6%95%B0%E2%80%94%E2%80%94%E5%91%A8%E6%9C%9F%E6%80%A7%E5%92%8C%E5%88%86%E7%BB%84/</url>
    <content><![CDATA[<p>余数，作除法运算时剩下的数。尽管从小学起我们就反复练习加、减、乘、除的计算，但有关余数的计算只在学习除法时略见其影，事实上，无论在数学还是编程中，余数都起着非常重要的作用。因为我们将意识到，“余数就是分组”，而且它的神奇性在于，将较大的数字除一次就能分组。</p>
<span id="more"></span>
<h2 id="1-星期数问题"><a href="#1-星期数问题" class="headerlink" title="1. 星期数问题"></a>1. 星期数问题</h2><p>以这样一个常见的问题为例：</p>
<blockquote>
<p>今天是星期日，那么 1 亿天以后是星期几？</p>
</blockquote>
<p>对于这个问题，我们显然知道，一周有 7 天，那么“7”是星期数的周期，从<u>今天</u>起每过 7 天，便循环到<u>和今天</u>相同的星期数。如果今天是星期日，则 7 天后、14 天后、21 天后……这种“7 的整数倍”天后都是星期日。由此我们便可引入除法运算，看 1 亿天里有几个 7 天，也就是周期的重复出现了多少次，以便将这个重复性影响剔除，方便我们解决问题。</p>
<p>显然，有</p>
<script type="math/tex; mode=display">
10^8 \div 7 =14285714 \cdots 2</script><p>这表示，1 亿（$10^8$）里面有 14285714 个星期数周期，将它们忽略，日子便相当于只前进了 2 天，因此从今天的星期日开始往后数 2 天，便是星期二，故而 1 亿天以后必然是星期 2。</p>
<h2 id="2-更进一步——隐藏的周期性分组"><a href="#2-更进一步——隐藏的周期性分组" class="headerlink" title="2. 更进一步——隐藏的周期性分组"></a>2. 更进一步——隐藏的周期性分组</h2><p>在星期数的问题上，如果数字更大呢？比如：</p>
<blockquote>
<p>今天是星期日，那么$10^{100}$天以后是星期几？</p>
</blockquote>
<p>我们固然可以套用之前的方法解决这个类似的问题，但是说实在的$10^{100}$这个数太大了，计算机计算起来都相当费力，我们需要更进一步的思考。</p>
<p>我们并不急于求出$10^{100}$，而可以像$1,10,100,1000,10000\cdots$这样，依次增加 0 的个数，观察其规律：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数字</th>
<th style="text-align:center">0 的个数</th>
<th style="text-align:center">除法计算</th>
<th style="text-align:center">星期数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$1$</td>
<td style="text-align:center">0</td>
<td style="text-align:center">$1 \div 7 = 0 \cdots 1$</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">$10$</td>
<td style="text-align:center">1</td>
<td style="text-align:center">$10 \div 7 = 1 \cdots 3$</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">$10^2$</td>
<td style="text-align:center">2</td>
<td style="text-align:center">$10^2 \div 7 = 14 \cdots 2$</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">$10^3$</td>
<td style="text-align:center">3</td>
<td style="text-align:center">$10^3 \div 7 = 142 \cdots 6$</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">$10^4$</td>
<td style="text-align:center">4</td>
<td style="text-align:center">$10^4 \mod 7 = 4$</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">$10^5$</td>
<td style="text-align:center">5</td>
<td style="text-align:center">$10^5 \mod 7 = 5$</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">$10^6$</td>
<td style="text-align:center">6</td>
<td style="text-align:center">$10^6 \mod 7 = 1$</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">$10^7$</td>
<td style="text-align:center">7</td>
<td style="text-align:center">$10^7 \mod 7 = 3$</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">$10^8$</td>
<td style="text-align:center">8</td>
<td style="text-align:center">$10^8 \mod 7 = 2$</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">$10^9$</td>
<td style="text-align:center">9</td>
<td style="text-align:center">$10^9 \mod 7 = 6$</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">$10^{10}$</td>
<td style="text-align:center">10</td>
<td style="text-align:center">$10^{10} \mod 7 = 4$</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">$10^{11}$</td>
<td style="text-align:center">11</td>
<td style="text-align:center">$10^{11} \mod 7 = 5$</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">$10^{12}$</td>
<td style="text-align:center">12</td>
<td style="text-align:center">$10^{12} \mod 7 = 1$</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">$10^{13}$</td>
<td style="text-align:center">13</td>
<td style="text-align:center">$10^{13} \mod 7 = 3$</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</div>
<p>我们发现，余数以$1、3、2、6、4、5\cdots$的顺序循环，即星期数在这个层面上也处于循环之中，循环周期为 6，故而$10^{100}$与$10^{94}、10^{88}、10^{82}\cdots$的星期数相同，我们将指数位置处的 100 对 6 作除法：</p>
<script type="math/tex; mode=display">
100 \div 6 = 16 \cdots 4</script><p>因此$10^{100}$与$10^{4}$的星期数相同，而在上表中我们已经通过$10^4 \mod 7 = 4$知道了$10^{4}$为星期 4，因此我们已经找到了答案。</p>
<h2 id="3-乘方尾数的周期性（异曲同工）"><a href="#3-乘方尾数的周期性（异曲同工）" class="headerlink" title="3. 乘方尾数的周期性（异曲同工）"></a>3. 乘方尾数的周期性（异曲同工）</h2><p>上面我们用星期数的案例为例描述了余数的作用，其实还有一个典型的问题与之类似：</p>
<blockquote>
<p>$1234567^{987654321}$的个位数是什么？</p>
</blockquote>
<p>$1234567^{987654321}$的数值显然同样大到难以计算，我们可以采用同样的做法解决这个问题，此外，由于我们只关注个位数字，因此可将高位数字忽略掉。具体计算方法这里不再赘述，答案为 7。</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>数字</category>
      </categories>
      <tags>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>决策树之特征选择</title>
    <url>/blog/2020/06/29/%E5%86%B3%E7%AD%96%E6%A0%91%E4%B9%8B%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<p>疏理一下决策树的特征选择的方法，即决策树的节点划分。</p>
<span id="more"></span>
<blockquote>
<p>一般而言，随着划分过程不断进行，我们希望决策树的分支结点所包含的样本尽可能属于同一类别，即结点的“纯度”(purity)越来越高。</p>
</blockquote>
<h2 id="1-符号声明"><a href="#1-符号声明" class="headerlink" title="1. 符号声明"></a>1. 符号声明</h2><p>假设当前样本集合$D$中第$k$类样本所占的比例为$p_k\:(k=1,2,…,|\mathcal Y|))$，离散属性$a$有$V$个可能的取值${a^1,a^2,…,a^V}$，若使用$a$来对样本集$D$进行划分，则会产生$V$个分支结点，其中第$v$个分支结点包含了$D$中所有在属性$a$上取值为$a^v$的样本，记作$D^v$。</p>
<p>样本集合$D$的信息熵定义为</p>
<script type="math/tex; mode=display">Ent(D)=-\sum_{k=1}^\mathcal{|Y|} p_k\log_2{p_k}</script><h2 id="2-信息增益"><a href="#2-信息增益" class="headerlink" title="2. 信息增益"></a>2. 信息增益</h2><script type="math/tex; mode=display">
Gain(D,a) = Ent(D)-\sum_{v=1}^{V} \frac{|D^v|}{|D|}Ent(D^v)\tag{1}</script><blockquote>
<p>实际上，信息增益准则对可取数目较多的属性有所偏好。</p>
</blockquote>
<h2 id="3-增益率"><a href="#3-增益率" class="headerlink" title="3. 增益率"></a>3. 增益率</h2><p>$C4.5$决策树算法选择增益率(gain ratio)来选择最优划分属性。</p>
<script type="math/tex; mode=display">
\begin{aligned}
Gain\_ratio(D, a)=\frac{Gain(D,a)}{IV(a)} \\
s.t. \quad IV(a)=-\sum_{v=1}^{V}\frac{|D^v|}{|D|}\log_2\frac{|D^v|}{|D|}
\end{aligned}
\tag{2}</script><p>$IV(a)$称作属性$a$的固有值(intrinsic value)。</p>
<blockquote>
<p>需注意的是，增益率准则对可取值较少的属性有所偏好，因此，$C4.5$算法并不是直接选择增益率最大的候选划分属性，而是使用了一个启发式：先从候选划分属性中找出信息增益高于平均水平的属性，再从中选择增益率最高的。</p>
</blockquote>
<h2 id="4-基尼指数"><a href="#4-基尼指数" class="headerlink" title="4. 基尼指数"></a>4. 基尼指数</h2><script type="math/tex; mode=display">
\begin{aligned}
\text{数据集$D$的纯度：} \\
Gini(D) &= \sum_{k=1}^{\mathcal{|Y|}}\sum_{k' \neq k}p_k p_{k'}\\
&= 1-\sum_{k=1}^{\mathcal{|Y|}}p_k^{2}
\end{aligned}</script><blockquote>
<p>直观来讲，$Gini(D)$反映了从数据集$D$中随机抽取两个样本，其类别标记不一致的概率。因此，$Gini(D)$越小，则数据集$D$的纯度越高。</p>
</blockquote>
<p>属性$a$的基尼指数：</p>
<script type="math/tex; mode=display">
Gini\_index(D,a) = \sum_{v=1}^{V} \frac{|D^v|}{|D|}Gini(D^v)
\tag{3}</script><blockquote>
<p>于是，我们在候选属性集合$A$中，选择那个使得划分后基尼指数最小的属性作为最优划分属性，即：</p>
<script type="math/tex; mode=display">a_* = \underset{a\in A}{\arg \min}\: Gini\_index(D,a)</script></blockquote>
]]></content>
      <categories>
        <category>ML</category>
      </categories>
  </entry>
  <entry>
    <title>常用linux命令杂记</title>
    <url>/blog/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<p><code>tmux</code>命令、更改 apt 源、<code>cloc</code>命令、更新 Git 到最新版</p>
<span id="more"></span>
<h2 id="1-tmux"><a href="#1-tmux" class="headerlink" title="1. tmux"></a>1. tmux</h2><p>当在本地的命令行中使用 SSH 连接到远程服务器进行工作时，如果 SSH 连接突然停止，会导致远程服务器中运行的相关命令停止执行（因为 SSH 创建的进程被关闭），这意味着如果你正在服务器中进行一个长时间执行的操作，比方说训练一个神经网络，当网络意外中断、或你关闭了本地的命令行窗口，将导致该操作的运行终止，而不是继续在服务器中执行。那么如何让“连接中断时，正在执行的指令仍旧保持运行”呢，这就可以用到 tmux 命令了。</p>
<h3 id="1-1-tmux-简介"><a href="#1-1-tmux-简介" class="headerlink" title="1.1. tmux 简介"></a>1.1. tmux 简介</h3><p>tmux(terminal multiplexer) 是一个终端复用器，它可以在一个窗口屏幕上创建、访问、控制多个终端。</p>
<ul>
<li>tmux 使得“终端会话”可以从屏幕上分离出来，继续在后台运行，待后续重新连接；</li>
<li>tmux 还允许每个会话有多个连接窗口，因此可以多个用户实时共享会话。</li>
</ul>
<h3 id="1-2-session、window、pane"><a href="#1-2-session、window、pane" class="headerlink" title="1.2. session、window、pane:"></a>1.2. session、window、pane:</h3><p>tmux 中有三个重要的概念需要辨析：session、window、pane，其手册中如是说：</p>
<blockquote>
<p>A session is a single collection of pseudo terminals under the management of tmux. Each session has one or more windows linked to it. A window occupies the entire screen and may be split into rectangular panes, each of which is a separate pseudo terminal (the pty(4) manual page documents the technical details of pseudo terminals). Any number of tmux instances may connect to the same session, and any number of windows may be present in the same session. Once all sessions are killed, tmux exits.</p>
<p>Each session is persistent and will survive accidental disconnection (such as ssh(1) connection timeout) or intentional detaching (with the ‘C-b d’ key strokes).</p>
</blockquote>
<p>即，一个会话(session)是一系列伪终端的集合，一个会话可以有多个窗口(window)，所谓的窗口就是日常所说的占据一块屏幕区域的窗口，每一个窗口又可以进行“分屏”，切割为若干窗格(pane)，或称之为子屏幕，对于每一个子屏幕，它也是一个独立的伪终端。</p>
<h3 id="1-2-tmux-命令"><a href="#1-2-tmux-命令" class="headerlink" title="1.2. tmux 命令"></a>1.2. tmux 命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">tmux</td>
<td style="text-align:center">开启一个 tmux 会话（以数字编号为名）</td>
</tr>
<tr>
<td style="text-align:center">tmux new -s &lt;session-name&gt;</td>
<td style="text-align:center">开启一个名为 session-name 的会话</td>
</tr>
<tr>
<td style="text-align:center">tmux ls</td>
<td style="text-align:center">查看所有存在的 tmux 会话</td>
</tr>
<tr>
<td style="text-align:center">tmux detach</td>
<td style="text-align:center">脱离当前 tmux 会话</td>
</tr>
<tr>
<td style="text-align:center">tmux attach -t &lt;session-name&gt;</td>
<td style="text-align:center">连接名为 session-name 的会话，这里的 session-name 当然也可以为数字编号形式的名字</td>
</tr>
<tr>
<td style="text-align:center">tmux switch -t &lt;session-name&gt;</td>
<td style="text-align:center">切换会话</td>
</tr>
<tr>
<td style="text-align:center">tmux rename-session -t &lt;oldname&gt; &lt;newname&gt;</td>
<td style="text-align:center">重命名会话</td>
</tr>
<tr>
<td style="text-align:center">tmux kill-session -t &lt;session-name&gt;</td>
<td style="text-align:center">销毁会话</td>
</tr>
</tbody>
</table>
</div>
<h3 id="1-3-tmux-快捷键"><a href="#1-3-tmux-快捷键" class="headerlink" title="1.3. tmux 快捷键"></a>1.3. tmux 快捷键</h3><p>在 tmux 会话内，可使用一些快捷键替代 tmux 命令，不过要想使用快捷键，必须每次先按下前缀键<code>Ctrl + b</code>唤醒快捷键功能。</p>
<blockquote>
<p>注意：若想脱离而不销毁会话，一定要按<code>Ctrl + b + d</code>，别按成了<code>Ctrl + d</code>，这个属于 linux 终端的快捷键，会直接退出并销毁会话。</p>
</blockquote>
<ul>
<li>系统操作：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">列出所有快捷键</td>
</tr>
<tr>
<td style="text-align:center">:</td>
<td style="text-align:center">进入命令行模式</td>
</tr>
<tr>
<td style="text-align:center">[</td>
<td style="text-align:center">进入复制模式，此时的操作与 vim 相同</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:center">脱离当前会话</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">选择要脱离的会话</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">强制重绘未脱离的会话</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">列出提示信息缓存，其中包含了之前 tmux 返回的各种提示信息</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+z</code></td>
<td style="text-align:center">挂起当前会话</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>窗口操作</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">c</td>
<td style="text-align:center">创建新窗口</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">关闭当前窗口</td>
</tr>
<tr>
<td style="text-align:center">数字键</td>
<td style="text-align:center">切换至指定窗口</td>
</tr>
<tr>
<td style="text-align:center">p</td>
<td style="text-align:center">切换至上一窗口</td>
</tr>
<tr>
<td style="text-align:center">n</td>
<td style="text-align:center">切换至下一窗口</td>
</tr>
<tr>
<td style="text-align:center">l</td>
<td style="text-align:center">在前后两个窗口间互相切换</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">通过窗口列表切换窗口</td>
</tr>
<tr>
<td style="text-align:center">,</td>
<td style="text-align:center">重命名当前窗口</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">修改当前窗口编号，相当于窗口重新排序</td>
</tr>
<tr>
<td style="text-align:center">f</td>
<td style="text-align:center">在所有窗口中查找指定文本</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>窗格操作</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">“</td>
<td style="text-align:center">当当前窗格上下平分为两块</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">将当前窗格左右平分为两块</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:center">关闭当前窗格</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">将当前面板置于新窗口</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+方向键</code></td>
<td style="text-align:center">以 1 个单元格为单位，移动窗格边缘</td>
</tr>
<tr>
<td style="text-align:center"><code>Alt+方向键</code></td>
<td style="text-align:center">以 5 个单元格为单位，移动窗格边缘</td>
</tr>
<tr>
<td style="text-align:center">q</td>
<td style="text-align:center">显示窗格编号</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td style="text-align:center">在当前窗格中选择下一窗格</td>
</tr>
<tr>
<td style="text-align:center">方向键</td>
<td style="text-align:center">移动光标以选择面板</td>
</tr>
<tr>
<td style="text-align:center">{</td>
<td style="text-align:center">向前置换当前面板</td>
</tr>
<tr>
<td style="text-align:center">}</td>
<td style="text-align:center">向后置换当前面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+o</code></td>
<td style="text-align:center">顺时针旋转当前窗口的面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Alt+o</code></td>
<td style="text-align:center">逆时针旋转当前窗口的面板</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-更改-Ubuntu-的-apt-源为阿里源"><a href="#2-更改-Ubuntu-的-apt-源为阿里源" class="headerlink" title="2. 更改 Ubuntu 的 apt 源为阿里源"></a>2. 更改 Ubuntu 的 apt 源为阿里源</h2><p>Ubuntu 下的包管理工具 apt 默认的软件源为国外服务器，在国内使用时经常会速度非常慢，因此可将其更换为清华源、阿里源等，只需要更改配置文件/etc/apt/sources.list 即可。</p>
<h3 id="2-1-备份原配置文件"><a href="#2-1-备份原配置文件" class="headerlink" title="2.1. 备份原配置文件"></a>2.1. 备份原配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/</span><br><span class="line">sudo <span class="built_in">cp</span> sources.list sources.list.backup</span><br></pre></td></tr></table></figure>
<h3 id="2-2-改写-source-list-配置文件"><a href="#2-2-改写-source-list-配置文件" class="headerlink" title="2.2. 改写 source.list 配置文件"></a>2.2. 改写 source.list 配置文件</h3><p>将/etc/apt/sources.list 文件的原内容全部加<code>#</code>号注释或直接删除，然后添加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>现在已经改写了配置文件，再执行以下命令即可完成 apt 的软件源的更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<blockquote>
<p>附：由于更新了软件源，因此一些软件被系统检测到的最新版本号可能发生变化，故而不妨再使用<code>sudo apt upgrade</code>更新一下这些软件。</p>
</blockquote>
<h3 id="2-3-sources-list-配置内容说明"><a href="#2-3-sources-list-配置内容说明" class="headerlink" title="2.3. sources.list 配置内容说明"></a>2.3. sources.list 配置内容说明</h3><p>sources.list 文件的每个配置条目都是有格式的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://site.example.com/debian distribution component1 component2 component3</span><br><span class="line">deb-src http://site.example.com/debian distribution component1 component2 component3</span><br></pre></td></tr></table></figure>
<p>其中每一行最后面的<em>componentN</em>参数表示对软件包的分类，ubuntu 下就是 main、restricted、universe、multiverse；<em>distribution</em>参数代表系统版本代号，可使用<code>lsb_release -c</code>命令查看，比如：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center">代号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ubuntu 15.04</td>
<td style="text-align:center">vivid</td>
</tr>
<tr>
<td style="text-align:center">Ubuntu 16.04</td>
<td style="text-align:center">xenial</td>
</tr>
<tr>
<td style="text-align:center">Ubuntu 17.04</td>
<td style="text-align:center">zesty</td>
</tr>
<tr>
<td style="text-align:center">Ubuntu 18.04</td>
<td style="text-align:center">bionic</td>
</tr>
<tr>
<td style="text-align:center">Ubuntu 19.04</td>
<td style="text-align:center">disco</td>
</tr>
<tr>
<td style="text-align:center">Ubuntu 20.04</td>
<td style="text-align:center">focal</td>
</tr>
</tbody>
</table>
</div>
<h2 id="3-cloc：统计代码行数"><a href="#3-cloc：统计代码行数" class="headerlink" title="3. cloc：统计代码行数"></a>3. cloc：统计代码行数</h2><p>当想要统计某文件夹下代码的行数时，可以使用<code>cloc</code>命令。如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cloc particle/</span></span><br><span class="line"></span><br><span class="line">     123 text files.</span><br><span class="line">     110 unique files.</span><br><span class="line">      23 files ignored.</span><br><span class="line"></span><br><span class="line">github.com/AlDanial/cloc v 1.82  T=0.22 s (494.5 files/s, 188728.2 lines/s)</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Python                          94           4487          15174          19605</span><br><span class="line">XML                              8            101            153           1023</span><br><span class="line">XSD                              1             23             15            161</span><br><span class="line">Bourne Shell                     1              2             36             26</span><br><span class="line">Markdown                         3             12              0             22</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">SUM:                           107           4625          15378          20837</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<h2 id="4-更新-Git-到最新版本"><a href="#4-更新-Git-到最新版本" class="headerlink" title="4. 更新 Git 到最新版本"></a>4. 更新 Git 到最新版本</h2><p>Ubuntu 的默认软件源（以及阿里源）不能把 Git 更新到官方最新版，导致一些特性不能使用（比如我想把主分支的命名从 master 改为 main）。要想对 Git 进行更新，如下添加 Git 官方的软件源然后更新即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加Git官方软件源</span></span><br><span class="line">sudo add-apt-repository ppa:git-core/ppa</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line"><span class="comment"># 查看当前Git版本</span></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>
<h2 id="5-to-be-continued"><a href="#5-to-be-continued" class="headerlink" title="5. to be continued"></a>5. to be continued</h2>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>晒被子</title>
    <url>/blog/2017/03/11/%E6%99%92%E8%A2%AB%E5%AD%90/</url>
    <content><![CDATA[<p>七点二十的闹钟响了，他起来将晦暗了一夜的宿舍的阳台门打开，外面的些许光亮跳进来，室内阴涩的废气被气流赶出去。看见楼下的晾衣绳上还空空如也，他欢喜地抱起被子、铺的跑过去，庆幸自己比这个世界早了一步醒来。</p>
<span id="more"></span>
<p>已然中午的太阳将楼前的空地尽染成金色，几乎不留一片阴影。吃罢午饭的他陡然来了睡意，便走向晒着一排排被子的草坪上去取晒了一上午的被褥。他用手刚一碰着它们，心里便“嗬”地发出一声惊叹——变这么厚了。那是，一整个寒假被丢在背阳的宿舍里，又是南方的潮湿空气，被褥们不知攒了多少阴气皱缩了多少呢，好不容易见着太阳，它们能不享受享受这日光浴嘛。</p>
<p>从遥远的太空不远万里飞过来的一束束的光暖，像水一般娇柔地在被子里里外外地氤氲开来，而它们依旧贪婪地吮吸着光和热。他用手捏捏被子的这里那里，到处都是鼓囊囊、软乎乎的，棉被的纹理挠得他从手心痒到心坎儿里。阳光也一片一片打在他的脸上，他觉得脸上有点辣乎乎的，虽然不痛却打醒了睡意，他感到他的神经开始躁动起来了。</p>
<p>“走走去吧，”他想，“让被子们在那儿睡去吧”。</p>
<p>他沿路走向学校北门，在北门前的圆形花池边上一个老年人推着一辆什么似的在他面前慢悠悠地在太阳底下走着，正午的太阳把他们的影子缩得很短，但相互映衬着却让人觉得十分安详。“应该是个轮椅，推着他老伴儿”，他想。他还是个青年，即使走得慢也比前面的老年人要快一些，何况那人还推了辆车呢，没几步他就能够看清那位老年人前面的状况了。原来是个孩子，那是辆婴儿车！他自娱自乐地笑了笑：反正大家都是来晒太阳的嘛。他用不快不慢的步伐超过了那对爷儿俩，走出北门，继续无所事事地踱步在东湖上一座桥上，他四处张望着来往的行人，除却几个看上去是中老年的妇人或大爷跟他同样悠闲以外，便是行色匆匆手里端着手机的跟他年龄相仿的青年了。</p>
<p>“我要么就是老了，要么就是太小”，他嘟囔了句。</p>
<p>下午过半时他在学校小操场看见了两伙打篮球的，三分、上篮、抢断，熟悉的节奏和呼喊吸引他在操场边的闪长岩坐台上坐了下来，用羡慕的表情观看着他们。他想起他还打篮球的日子，上次那样热血沸腾地打球还是在初中时候呢，上了高中后便不打了，戴起了该死的眼镜，一戴便是六年。对，眼镜影响了他太多，想到这他再一次下定决心一定要攒钱，攒够治疗近视的手术费，可以的话一定要把可恶的眼镜给摘掉，然后就能肆无忌惮地运动了。</p>
<p>傍晚时分他收起了晒得饱饱的被褥，将铺的抻好后他坐在富有弹性的床上，喊道：“哇噻，整厚了一倍呢。”他又抱起两个像大大的棉花糖一样的被子，使劲地搂着，松开，又搂，又松开。他将头整个埋在被抱成团的棉花被里，呼吸着那里阳光的味道，脸蛋被一股一股热气呼哧呼哧地扑腾着，那是太阳暖暖的余温。他幸福地叫道：“好舒服啊，太棒了！”</p>
<p>“其实，我还是个孩子”，他想。</p>
<p>晚上从图书馆回来，他看了下第二天的天气预报：晴天。他开心地在手机便签上写下：喜欢晒被子的人一定是热爱生活的人。</p>
<p>随即他定好了清晨七点的闹钟。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>观演讲：《王德峰-中西方文化差异的渊源》</title>
    <url>/blog/2022/03/20/%E8%A7%82%E6%BC%94%E8%AE%B2%EF%BC%9A%E3%80%8A%E7%8E%8B%E5%BE%B7%E5%B3%B0-%E4%B8%AD%E8%A5%BF%E6%96%B9%E6%96%87%E5%8C%96%E5%B7%AE%E5%BC%82%E7%9A%84%E6%B8%8A%E6%BA%90%E3%80%8B/</url>
    <content><![CDATA[<p><img src="https://chua-n.gitee.io/figure-bed/blog/王德峰/7090828b8b3e48e5c907d5d084a1c8a6020e81f6.jpg" style="zoom:75%;" /></p>
<p><a href="https://www.bilibili.com/video/BV1XU4y1h7iL?share_source=copy_web">讲座</a>发生于2014年3月27号，复旦大学，时长2.5小时，如同一场电影。</p>
<span id="more"></span>
<h2 id="1-讲座记录"><a href="#1-讲座记录" class="headerlink" title="1. 讲座记录"></a>1. 讲座记录</h2><h3 id="新中国社会的演变"><a href="#新中国社会的演变" class="headerlink" title="新中国社会的演变"></a>新中国社会的演变</h3><p>尽管我们有过一段不短的时期，就是毛泽东时代，搞社会主义计划经济体制，但这个时代仍然属于资本的时代，是没有资本家的资本社会。为什么这么说？我们仍然在计划经济时代搞商品经济，我们不是产品交换是商品交换，我们不同的生产部类之间的交换是要通过商品价值交换来实现的，所以价值规律一定起作用，价值规律一旦起作用，那么剩余价值规律也会发挥作用。于是毛泽东在晚年说过，我们今天的社会跟旧社会差不多。</p>
<h3 id="谈当下中国的社会现状"><a href="#谈当下中国的社会现状" class="headerlink" title="谈当下中国的社会现状"></a>谈当下中国的社会现状</h3><p>改革开放……三十多年来，我们中国人努力学习资本的逻辑，我们以为通过进一步地让市场经济健康正常和完善就会带来中国的进步，那么现在我们遇到了很大的问题。</p>
<p>有两个基本的问题吧。</p>
<p>第一个基本的问题：今日之中国，社会各个阶层，无论是在社会市场经济改革的浪潮中取得成功的少数成功者阶层，还是多数弱势群体，没有一个社会阶层有生命幸福感，没有一个阶层找到安身立命的地方，整个民族没有精神家园，我们从一个物质上普遍不满足的时代，进入了一个精神上普遍不安宁的时代。</p>
<p>……</p>
<p>基本问题之二：我们今天的中国社会并不是由于资本逻辑的引进，而终于形成了一个理性的社会秩序，独立的个人彼此之间按照理性作基础的契约的原则打交道，这一点直到今天也没做成。将来会不会成？我看也不会成。那么今天的不成功，体现为今天中国社会处于解体的边缘。这个解体的边缘的判断，一个基本的现象，我们都看到了、体会到了，就是普遍的信任危机。穷人与富人之间互不信任、政府与百姓之间互不信任、社会公共机构与社会公共机构之间也互不信任，甚至家庭内部的成员之间也互不信任，我们再度地出现了如孙中山先生当年所说的一盘散沙的中国人这样一个局面。而且这个沙粒，不是以家族为单位的……今天的沙粒，是利己主义的个人。</p>
<p>……</p>
<p>所以两个基本的问题放在当下中国人的面前，一个是没有精神家园，一个是社会处于解体的边缘。普遍的信任危机、各种丑恶的社会现象层出不穷……</p>
<p>于是，今天的状况就是：法治不立、秩序紊乱、各图侥幸、群情不安。</p>
<h3 id="讲资本的逻辑与法的理性"><a href="#讲资本的逻辑与法的理性" class="headerlink" title="讲资本的逻辑与法的理性"></a>讲资本的逻辑与法的理性</h3><p>资本诞生于欧洲，而它一定突破欧洲的疆界……而由资本的逻辑所要求的社会关系的主导原则是什么呢？是在独立的个人之间，建立以理性为基础的契约。于是，人权的原则、人道主义的原则被广泛的接受，在中国文化中所体现的人与自然的关系，以及人与人的关系，似乎只存在于中国人的记忆之中了，似乎。</p>
<p>……</p>
<p>我相信，今天当我们看到父母亲把孩子告到法庭上去，或者孩子把父母亲告到法庭上去，或者兄弟姐妹彼此对簿公堂，无论哪一方胜诉，胜诉的一方绝不会有幸福感，各位同意吧？法的理性，绝不会成为一个民族的社会生活的价值基础……中国之未来，所谓法治的国家，不要把它想象成所有的人际关系的矛盾都是由法律的原则来处理的，这其实是不可能的。</p>
<p>……</p>
<p>日常生活的维系，不是靠法的理性，也不是靠资本的逻辑，靠一个民族的伦理精神。</p>
<p>……</p>
<p>那么，资本对于今天的中国人，意味着什么？意味着在传统的社会生活的范式中，获取物质利益的新手段——资本与市场，绝不意味着现代经济理性与现代市场规则，而是获取物质利益的新手段。所以资本和市场作为手段，而我们社会生活的基本范式仍然是传统的，于是矛盾和张力就来了，于是种种的病症也会来。</p>
<h3 id="谈亨廷顿的八大文明区"><a href="#谈亨廷顿的八大文明区" class="headerlink" title="谈亨廷顿的八大文明区"></a>谈亨廷顿的八大文明区</h3><p>……</p>
<p>我现在要强调的是，亨廷顿有这样的失误。</p>
<p>第一，把中华文明看成是一种儒教文明。儒家不是宗教，所以他没有找到中国文化的根在哪里，中华民族是一个世界上很少的这样一个民族，就是无宗教的民族。</p>
<p>（第二，享廷顿以宗教来划分文明，但实际应该以语言来划分。）我们中国人为什么怎么像西方学习都学不成西方人的根源，根源在汉语。我们如何理解语言，从科学的角度，说语言是……这样来理解人类的语言，就是语言的科学观，它错了，它只是把人类的语言当成是符号工具。</p>
<p>语言是什么？语言是人类存在的家。人以语言之家为家，这是海德格尔的一句非常重要的话。动物没有语言（除非你在比喻的意义上有），所以动物没有世界只有环境。人有语言，于是人有一个世界，大地山川、星辰河流向人呈现出来，万事万物，整一个宇宙向人呈现，因为人在语言中了。</p>
<p>……</p>
<p>所以，人对世界的基本经验，都是在语言中的经验；人对世界的基本理解，都是在语言中的理解；人在这世界上生活所形成起来的最基本的生存情感，也是在语言中形成起来的生命情感；人所形成起来的人生的基本态度，也是他所在其中的那个母语给他的。</p>
<p>……</p>
<h3 id="中国语言"><a href="#中国语言" class="headerlink" title="中国语言"></a>中国语言</h3><p>凡是能体现或凝聚中国思想、中国文化精神的汉语的词语，没有一个能够翻译成欧洲语言。</p>
<p>……</p>
<p>我们随便举例子……缘分（同时表现偶然性与必然性）、</p>
<p>……</p>
<p>可见中国思想和西方思想的差别我们在这里看到了，西方理性主义的：我所做的一切事情，来自我明确的、理性的计划，和意志的执行。缘分这件事情他们不懂的。不行了、失败了，再来一次：不断地修改、不断地改造，在这个社会、包括自己的人生有许多的缺陷，有缺陷怎么办？改造它。改造论（改造的观念）来自柏拉图主义——理念论。</p>
<p>那么中国人（现在）也像西方人一样不断改造——改造自然、改造社会、包括改造自己个人的生活。不可能的各位，你后来才发现不需要改造，改造是很荒唐的事情。</p>
<h3 id="谈金刚经"><a href="#谈金刚经" class="headerlink" title="谈金刚经"></a>谈金刚经</h3><p>世界作为实体它是不存在的，要把它空掉的，但世界作为缘起你要承认的，缘起是真实的，不因为性空而否定缘起。</p>
<p>……</p>
<p>理念是柏拉图所说的实体。</p>
<h3 id="谈理念论"><a href="#谈理念论" class="headerlink" title="谈理念论"></a>谈理念论</h3><p>于是，柏拉图的理念论在近代以来的西方文明当中得到了最充分的体现——它可以创建出自然界中本来没有的东西。比方说泡泡糖……氰化植物油……</p>
<p>……</p>
<p>这些事情表明了柏拉图主义有重大的成果，这些成果当中包含重大的危险。</p>
<p>另外还有一个成果是以理念论的原则来建构社会秩序。我们现在最欣赏西方的社会秩序了，理性的……一切的社会组织不是暗示着我们每一个个人向上攀登的道路，而是平面化的，每一个社会秩序、第一个社会组织、每一个单位，它的秩序的组织按照理性来组织。为什么按照理性为组织并且大家接受了这一点呢？是因为它唯有一个理由——效率。</p>
<p>……</p>
<p>我们不能因此就说西方文明压根就是一个很不好的、充满毛病的文明，我们必须承认它带来的成果。比方说我们可以在技术的运用下实现了不靠天吃饭这样一件事情……</p>
<h3 id="西方文明的根源"><a href="#西方文明的根源" class="headerlink" title="西方文明的根源"></a>西方文明的根源</h3><p>地理环境 -&gt; 古希腊的宗教、神话 -&gt; 引发西方哲学的特征：继续保持两个世界的区分</p>
<p>真理，或者在天国里，那叫做宗教的世界（彼岸），亦或者在哲学上所说的理念世界（彼岸），（总之，）真理在彼岸。以彼岸的原则来改造此岸，这就是西方文明的基本态度，理解世界的基本框架。</p>
<h3 id="中国文化的独特性"><a href="#中国文化的独特性" class="headerlink" title="中国文化的独特性"></a>中国文化的独特性</h3><blockquote>
<p>觉悟、因果、业力、意识、真理、境界、心心相印，这些词都是因为佛学中国化进入汉语的。</p>
</blockquote>
<p>中国人论道，儒道佛都论道，没有论出两个世界，它只有一个世界。天道在哪里？天道在人民生活中，它不脱离人民生活。</p>
<p>所以孔子说过这样一句话：道不远人。</p>
<h3 id="中国文化中的道"><a href="#中国文化中的道" class="headerlink" title="中国文化中的道"></a>中国文化中的道</h3><p>……人世间的烦恼跟智慧来自同一个根源——我们的本心。我们的本心一起念（本心是要起念的，本心不起念它就不是心了），如果它起的妄念，那叫烦恼；假设它不是起的妄念，它叫智慧。烦恼来自本心，智慧也来自心，这不是两个对立起来的本心。众生之烦恼，也是智慧产生的地方。</p>
<p>……</p>
<p>应无所住，而生其心。</p>
<blockquote>
<p>住就是停留、执着，住就是住相。相是什么？相就是我们把这世界上所有的事物和所有的人都区分出一个高低贵贱，这叫相。还停留在这种区分里，这叫住相。</p>
</blockquote>
<p>……</p>
<h3 id="中西方思想的比较"><a href="#中西方思想的比较" class="headerlink" title="中西方思想的比较"></a>中西方思想的比较</h3><p>两个基本的认识：</p>
<ul>
<li>我们不承认一个彼岸的世界，不认为真理存在于一个彼岸的世界里；</li>
<li>中国人所能接受的真理，并不是理性逻辑的真理，是生命情感的境界。</li>
</ul>
<p>……</p>
<p>中国哲学是升华人生情感的哲学，中国哲学讲到底是人生哲学。</p>
<p>……</p>
<p>人活在这个世界上，让我们站在大地上的决不是我们头脑中的理性，而是生命情感。西方的哲学把人类心灵中的情感放得很低，第一等级理性，第二等级意志，叫第三等级才叫情感，它们对人生与世界的理解是罗格斯中心主义的。中国哲学恰好相反，把生命情感提到根本的位置上来。</p>
<p>……</p>
<p>所以孔子说，一言以蔽之，诗无邪。（无）邪者诚也，诚者，性情之正也。这是最根本的修养。我们不要以为我们可以以冷冰冰的思考来安排我们的生活，我们无时无刻不在情感之中，我们不是恰好拥有了一份欢乐或者拥有了一份悲哀，而是当我欢乐的时候我就是这份欢乐，当我悲哀的时候我就是这份悲哀。而不是我拥有一个冷冰冰的与情感我关的心灵的实体，此刻恰好处于悲哀的状态，然后我把这状态排除掉，没有这种事情的。生命情感之方方面面就构成了我们的心，它就是我们的心，如果它正了，那叫佛家讲的本心。</p>
<p>……</p>
<p>智商跟根器不是一回事。中国哲学的著作它的文字表达一个重要的特征是什么？充满了形象、比喻、例证、暗喻，有文学的价值，一句话并不是把它推理出来的，是直接告诉你的，你不接受是你慢慢去体会的问题跟我没关系。中国古代的圣人把他直接所见就说出来了，这叫直觉的真理，直观的，西方哲学是推理的真理。</p>
<p>……</p>
<p>西方的推理的真理：大前提 -&gt; 小前提 -&gt; 推论。不停往前推，终于找到一个推论，它的前提不再是任何推论的结果，它一定是直觉。中国哲学给出的是什么？全是这些东西。</p>
<h3 id="反者道之动"><a href="#反者道之动" class="headerlink" title="反者道之动"></a>反者道之动</h3><p>老子说，反者道之动……即世界上所有的事物，都必然走向它自己的反面。</p>
<p>……</p>
<p>从反者道之动里面推，为人处世的道家的两条通则：</p>
<ul>
<li><p>如果你要得到一个事物，你就要从它的反面开始。</p>
<blockquote>
<p>你要强大，必须从弱开始；你要高，必须从低开始。</p>
</blockquote>
</li>
<li><p>你要比较长久地保持一个事物，必须让这个事物包含它的对立面。</p>
<blockquote>
<p>资本主义要活得长久一点，它必须包含自己的对立面社会主义。</p>
</blockquote>
</li>
</ul>
<h3 id="儒道佛"><a href="#儒道佛" class="headerlink" title="儒道佛"></a>儒道佛</h3><p>谁保证你正当呢？儒家。谁让你在正当的前提下能够面对这个反者道之动的世界呢？道家。道家不教我们道德标准，道家是教我们如何在这个世界上自由一点、更自在一点，但好和坏他不想家，善与恶他不想讲，所以我们不能光有道家，这不对的……老子的《道德家》有好多种用法……</p>
<h3 id="讲五伦"><a href="#讲五伦" class="headerlink" title="讲五伦"></a>讲五伦</h3><blockquote>
<p>君臣有义、父子有亲、夫妇有别、长幼有序、朋友有信。</p>
</blockquote>
<p>……所以夫妇有别，共命运、各司其职，形成一种情感，这种情感洋人不懂的，而且词汇当中没的。洋人懂的男女之感情，只有一个词，叫love，叫爱情，所以他们终生相爱只会说I love you，天天说的。我们也很感动，其实心里知道这个感情不恰当的，在结婚之前I love you，在结婚之后天天I love you这不大现实的，其实不真实的。</p>
<p>而且I love you这个句型有个问题，就主体面对客体，对吧，就是你是我的一个对象，现在我告诉你：I love you。中国人说这种话吗？现在说了，是跟洋人学的，以前从不说这种话。中国人以前怎么表达爱情的？你这个俏冤家，你这个杀千刀的。你是冤家知道吧，我跟你的关系真是很难过你知道吧，舍不得离开你但是又恨你。爱情的真相真这样的啊各位。</p>
<p>……</p>
<p>所以中国人讲人生的价值，就人与人的关系，都是交互性的……不是什么I love you, you love me……我们叫fall in love，这句话是很好的，跌进去的，而且还后悔来不及了你知道吧。那么什么时候后悔来不及呢？结婚了。</p>
<p>结婚了以后呢一定发生一次重要的转变，叫反者道之动。爱情也是个事物啊，它服从反者道之动的，所以爱情一定走向自己的反面，叫婚姻。于是当爱情结束的时候，它转变为亲情，但这份亲情严格来说它不叫亲情，因为它没有血缘关系作基础。没有血缘关系的亲情，很伟大，但是欧洲语言找不到任何词来表达。中国怎么表达的？两个字，恩爱。</p>
<p>……但爱情这份价值，儒家思想不说的……这个事情今天不展开……</p>
<h3 id="讲未来"><a href="#讲未来" class="headerlink" title="讲未来"></a>讲未来</h3><p>我们看到了这种中国特色的市场经济表明了许多的病症，但是我们要知道将来中国的市场经济仍然是中国特色，它应该展现出、它会展现出积极的方面。这个积极的方面就是什么？中国文化精神一定形成对资本逻辑的限制，并且为扬弃资本逻辑准备好精神钥匙。我们中国人不会彻底地用资本的语言、用市场的语言来说话的，我们将会学会把它限制在它的一个范围之内。</p>
<h2 id="2-延伸：讲玻尔与爱因斯坦的辩论"><a href="#2-延伸：讲玻尔与爱因斯坦的辩论" class="headerlink" title="2. 延伸：讲玻尔与爱因斯坦的辩论"></a>2. 延伸：讲玻尔与爱因斯坦的辩论</h2><blockquote>
<p>另一个<a href="https://www.bilibili.com/video/BV1er4y127jn?share_source=copy_web">视频</a>。</p>
</blockquote>
<p>你比方说爱因斯坦跟哥本哈根学派有个争论，哥本哈根学派的领袖是波尔，波尔在讨论自然世界的基础究竟是粒子还是波，后来他提出波粒二象性理论，从一个角度看它是粒子，从另一个角度看它是波，然后它们是互波的。</p>
<p>所有的量子规律，就在微观领域里边的科学规律啊，就基本粒子的运动规律都是统计规律，他的可靠性不是一一规定的，是统计出来的一个统计相关性的规律。</p>
<p>他提出这个理论之后呢，马上就遭到爱因斯坦反驳。爱因斯坦第一句话就跟他讲，上帝从不掷骰子。假如科学定理都变成统计规律，它不是掷骰子的概率吗，这怎么可能呢，上帝是严格的必然性，自然界是这样被造出来的，决不是你投骰子甩来出的。</p>
<p>争得很厉害，那场辩论是极其精彩的，许多当时第一流的科学家都参加了。</p>
<p>……中国思想一定不会被爱因斯坦所统一的，但是（可能）会被玻尔所统一。玻尔1937年来访问中国的，他跟中国的那些学者交流玻尔就第一次接触到道家思想。中国的学者跟他讲中国的道家是怎么理解世界，然后拿太极图给他看，他大受鼓舞。他说我的波粒二象性理论在中国思想中得到了支持，回去就把他家族的族徵改了，改成阴阳太极图，底下用德语写了一句话，翻译成汉语叫“对立即互补”。</p>
<p>……</p>
]]></content>
      <categories>
        <category>哲学</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记：《历史学是什么》</title>
    <url>/blog/2021/02/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E5%8E%86%E5%8F%B2%E5%AD%A6%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%8B/</url>
    <content><![CDATA[<p>葛剑雄，周筱赟著：《历史学是什么》，北京大学出版社，2015 年 9 月第 1 版。</p>
<span id="more"></span>
<blockquote>
<p>作者语：大部分的青少年，包括中小学生、非历史学及相关专业的大学生，他们学历史只是增加知识、满足兴趣、陶冶情操，既没有必要，也不应该让他们把时间花在非常琐碎的历史细节和有重大争议问题的讨论上，只要告诉他们一些基本史实或学术界公认的观点就可以了。</p>
<p>作者语：一位历史老师，不可能，也没有必要把历史研究的全部内容传授给学生，尤其是目前尚有很大争议的问题，对缺乏分析判断能力的中小学生而言，反而容易引起思想混乱。</p>
</blockquote>
<p>作者对历史的划分：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">时间系列</th>
<th style="text-align:center">空间系列</th>
<th style="text-align:center">内容系列</th>
<th style="text-align:center">人物系列</th>
<th style="text-align:center">另类历史</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">通史、断代史、阶段史…</td>
<td style="text-align:center">世界史、国别史、地区史…</td>
<td style="text-align:center">综合史（总史）、专门史、资料汇编、年表、历史地图…</td>
<td style="text-align:center">个人、血缘群体、地域群体、专门群体…</td>
<td style="text-align:center">文学、艺术、宗教、神话、音乐、戏剧、影响、民间故事..</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>现在中国历史上第一部通史是司马迁的《史记》。</p>
</blockquote>
<h2 id="一、一些地域特色"><a href="#一、一些地域特色" class="headerlink" title="一、一些地域特色"></a>一、一些地域特色</h2><ol>
<li>杭州方言在整片吴方言区内，是一个非常典型的方言孤岛，仅分布于杭州市城区，范围极小，甚至一到城郊方言就大不相同。杭州方言在语音、词汇和语法等方面都有浓厚的北方官话色彩。<blockquote>
<p>如，杭州方言具有大量的“<strong>儿尾词</strong>”，这不同于北方的“<strong>儿话音</strong>”：儿话音附在前字字音末尾，与前字合成一个音，起卷舌作用，并非一个独立的音节，而杭州方言恰恰相反。之所以如此，是北宋末年宋室南渡，大批北方移民涌入临安（今杭州），受本地方言影响下的产物；另外民国成立后，原清政府驻军 <em>旗下营</em> 解散，大批旗人子弟也给杭州方言融入了北方官话的因素。</p>
</blockquote>
</li>
<li><strong>蒙古褶</strong>与<strong>蒙古青</strong>：蒙古人种由于最初生活在草原和半干旱地区，在眼睑上形成具有保护眼睛的眦褶的比例很高，人类学上称作蒙古褶，俗称双眼皮；大部分蒙古人种的初生婴儿臀部由于皮下色素沉积，出现青紫色斑，被认定是蒙古人种所特有的遗传特征，称为蒙古青。</li>
<li>现在的省区划分，基本上是继承明清的制度，在建省之初，必定是由于这片区域具有一些共同点。</li>
<li>以前一直把今天的江苏南部、浙江北部、上海市辖区合称为“<strong>吴越</strong>”。</li>
</ol>
<h2 id="二、关于年号纪年"><a href="#二、关于年号纪年" class="headerlink" title="二、关于年号纪年"></a>二、关于<strong>年号</strong>纪年</h2><ol>
<li>中国最早的纪年方式是干支纪年，即 10 个天干和 12 个地支排列组合，每 60 年为一个循环。以后增加了以帝王在位的年数纪年，从<strong>元年</strong>（一般为即位的次年）开始，逐年累计到去位。</li>
<li>最早的年号始于汉武帝元鼎元年（前 116），据说当时在汾水旁获得一只宝鼎，被认为是一种吉兆，因而设置<strong>年号</strong>，从此成为惯例。现在史书上所见汉代以前的年号，都是后来追加的。</li>
<li>如上所说，新皇帝继位后，一般都从第二年开始使用新的年号，但也有当年就改的，这种情况下一年便会出现两个年号，如果这两位皇帝在这一年还改过年号，那一年就会出现更多的年号了。</li>
<li>在明代以前，同一皇帝在位时往往不止一个年号，常会以顺应天象、应贺吉兆等理由而<strong>改元</strong>，有的皇帝改元异常频繁，如唐高宗李治在位的 34 年用过 14 个年号，武则天在位的 21 年间用了 17 个年号。而明清两朝，一位皇帝只用一个年号，所以一般就用年号来称为皇帝，如乾隆皇帝，反而不用他的庙号“高宗”、尊号“法天隆运至诚先觉体元立极敷文奋武钦明孝慈神至纯皇帝”（简称纯皇帝）和姓名爱新觉罗•弘历。</li>
<li>皇帝、皇后（太后、太皇太后）的<strong>尊号</strong>、<strong>徽号</strong>、<strong>庙号</strong>、<strong>谥号</strong>虽然同属一人，但不同时间有不同的称呼，不能乱用或混用。皇帝生前可以有尊号和徽号，尊号还可以由简而繁、不断增加，但只有死后才会有谥号和庙号。<blockquote>
<p>帝、后有了尊号后，臣子会不断地给他们加颂扬褒美的词作为徽号，唐宋以后渐成惯例，到嘉庆时，大概觉得再加下去没完没了，就规定了制度，列朝皇帝已加到 24 字、皇帝已加到 16 字的便不再追加，所以其他皇帝都是 22 字或 20 字。由于这类尊号、徽号几乎用遍了颂词，每个皇帝大同小异，已是毫无意义的文字游戏，所以除了用在正式文书中外没有什么用处，就是当时人一般也都用简称，如慈禧太后尊号全称是“慈禧端佑康颐昭豫庄诚寿恭钦献崇熙皇太后”，一般仅称“慈禧太后”或“慈禧皇太后”，在她死前 16 字已经用满，颂词已用尽，所以死后就将尊号当作谥号。</p>
</blockquote>
</li>
<li>年号出现后，干支依然十分流行，所以往往年号与干支混合使用。特别是明清两代，有的年号持续时间很长，两者混用会更符合当时人们的习惯，如万历十五年（1587）可称万历丁亥，光绪二十六年（1900）可称光绪庚子。除了康熙在位长达 61 年，出现过两个壬寅（元年、六十一年）外，其他的号都不超过 60 年，所以不存在混淆的问题。</li>
<li>年号一般均为二字，但也有少数的多字年号。其中三字年号为王莽的“始建国”、梁武帝的“中大通”和“中大同”；四字年号略多一些，主要集中在唐宋两代，武则天一人就占了三个，“天册万岁”“万岁登封”“万岁通天”，宋太宗有“太平兴国”，宋真宗有“大中祥符”、宋徽宗有“建中靖国”等等。</li>
<li>年号用字和意义的选择都要符合吉利、赞颂、祈求、美好的要求，所以一些字和词被频繁使用，有的年号被用了不止一次。<blockquote>
<p>最多的是“太平”，八次；其次是“建武”，七次；再次是“中兴”“永平”“永兴”“永和”“建平”“建兴”，六次；“太安”“太和”“甘露”“永安”“永康”“建元”“建始”也都有五次。</p>
</blockquote>
</li>
<li>中国的农历并非单纯按照月亮的运行计算，而是一种阴阳混合历，即既按月相的盈亏决定每个朔望月的长度，又按太阳的视运行周期决定每个回归年的长度，并按年对月进行加闰调整。农历的正月初一最早可开始于公历的 1 月下旬，也可晚至公历的 2 月下旬。</li>
</ol>
<h2 id="三、血亲关系、地域"><a href="#三、血亲关系、地域" class="headerlink" title="三、血亲关系、地域"></a>三、血亲关系、地域</h2><ol>
<li><strong>拟制血亲关系</strong>：有一些特殊的家族群体并不是以真正的血缘关系维系的，而是通过人为的方法和程序模仿真正的血亲关系而制造出来的拟制血亲关系。在唐五代时期，这种拟制血亲关系相当普遍，成为一时的风尚。</li>
<li>唐五代割据军阀收养义子，数量据人。安禄山就有义子 8000 人，田承嗣有 3000 人，王建有 120 人，以此作为巩固势力、笼络人心的一种手段。</li>
<li>后唐明宗<strong>李嗣</strong>本是无姓的沙陀族部民，小名邈佶烈，因骁勇善战为唐末军阀 <em>李克用</em> 赏识而收为义子，赐姓名<strong>李嗣源</strong>，即帝位后又更名为<strong>李亶</strong>。</li>
<li>欧阳修在《新五代史-义儿传序》中感叹道：“世道衰，人伦坏，而亲疏之理反其常，干戈起于骨肉，异类合为父子。”</li>
<li><strong>郡望</strong>：该姓家族中最显赫一支的发祥地。古人传记或自述中的籍贯大多是祖籍，或者郡望，而未必是他真正的出生地。</li>
<li>秦汉以来在首都任职的官员和各地的行政长官多数不是本地人，有的离开原籍已不止一代，但除了某些特殊情况，他们一般不会改变自己原来的籍贯。东汉时出现了好几位籍贯是西北边郡的知名学者，但实际上除了个别人以外，他们都是在首都洛阳等地方居住或接受教育。明清时也有不少生长在京师的人物，籍贯却还是南方的祖籍，南方对他们的影响只是血统和家庭的传统，但北京对他们的影响却起决定性作用。</li>
<li>自魏晋<strong>门阀制度</strong>盛行以后，高门世族成为士人立命进身的基础，各姓人士无不标榜本族的郡望，王氏必称太原，谢氏必称陈郡，杨氏必称弘农，赵氏必称天水，等等。因此，已在京师任职数代的大族，必然还要以郡望所在为籍贯。<blockquote>
<p>像唐代的韩愈自称“昌黎韩愈”，其实他是河南河阳人（今河南孟州市），昌黎只是其郡望而已。而且，在这种制度影响下，一些人进身无门，不得不冒用他族的郡望，甚至伪造世系。这些人的籍贯就更与他们的出生地无关了。</p>
</blockquote>
</li>
<li>除了同一出生地之外，在同一地方活动，或者在同一地方结成某一个利益集团，这些群体可能也都是地域性的。例如，刘邦即帝位后建都洛阳，一方面固然是由于秦朝故都咸阳已完全被毁，另一方面也是由于洛阳比较靠近这批人的故乡，所以只有像张良这样具有长远战略眼光、又为刘邦所信用的谋士才能说服他迁都关中。唐代也有类似情况。</li>
<li>明清以来，朝野都喜欢用籍贯来称呼某个政治人物，如分宜相严嵩（江西分宜人）、李合肥（李鸿章）、张南皮（张之洞）、翁常熟（翁同龢)、袁项城（袁世凯），甚至连姓都不用，如项城即指袁世凯。</li>
</ol>
<h2 id="四、“中国与世界”"><a href="#四、“中国与世界”" class="headerlink" title="四、“中国与世界”"></a>四、“中国与世界”</h2><ol>
<li>有一些人借着弘扬中国文化的名义，把《周易》及阴阳学说抬高到了无以复加的地位，似乎成了集科学的大成，成了中国以至世界一切科学的源泉。尽管莱布尼茨从中国的八卦得到启发而发明二进制的故事已经不止一次被指出并非事实，而只国人一厢情愿的误解，事实不过是莱布尼茨发明二进制之后，从在中国传教的法国籍传教士处获得了宋代邵雍的六十四卦图，发现可以用他的二进制数学来解释，但不少人至今还在津津乐道，以此来证明《周易》的伟大。</li>
<li>作为中国四大发明之一的造纸术在阿拉伯世界的传播，靠的是怛(dá)罗斯战役的唐军俘虏。而意外地亲身游历了中亚、西亚并留下纪录的，竟也是俘虏之一的杜环。在大批西域“商胡”、阿拉伯“蕃客”来中原经商致富、定居繁衍的同时，唐朝人在境外的发展几乎是一片空白。</li>
<li>北方游牧民族是中原政权唯一存在的威胁，如匈奴、鲜卑、突厥、契丹、女真等，长城就是为了阻止这些民族的南下而修建并被后代不断增筑的。尽管他们曾经不止一次征服过中原，但由于这些民族整体上，特别在经济上、文化上落后于中原汉族，连这些民族本身也被消融于汉族的汪洋大海之中。</li>
<li>在西方历史上历经 1800 多年流散生涯，以强大的凝聚力固守本民族宗教文化传统而著称的犹太民族，其中的一支于北宋中叶进入开封定居，长期过着和平生活，得到汉族的平等对待，也逐渐放弃本民族的语言，开始学习儒家经典，参加科举考试，娶汉族女子为妻，最终失去保持本民族特征的心态，融合到了汉族之中。在 19 世纪初，开封犹太人中就已经没有专门的神职人员，无人能够阅读希伯来文经典了。这是见于记载的犹太民族被外族同化的唯一例子。</li>
<li>像林则徐这样的伟大人物，也相信洋人的腿关节不能弯曲，因此一度认为清朝军队只要以长竹竿为武器将他们拨翻在地，他们就会束手就擒了。</li>
</ol>
<h2 id="五、杂记"><a href="#五、杂记" class="headerlink" title="五、杂记"></a>五、杂记</h2><ol>
<li>秦朝至清朝鸦片战争前的这 2000 余年，中国的疆域在不断变化，但总的趋势是越来越扩大、稳定和巩固，最终形成了清朝统一后的极盛疆域，也为今天中国的领土奠定了基础。</li>
<li>明初朱元章虽然定都江宁（今南京），但也知道首都偏南、离北方军事要地太远的缺点，一直想迁都北方，先后考察过西安和开封。当西安因过于残破、交通不便被否决后，朱元璋将希望寄托在开封，却发现汴渠已无法恢复，原有河道太浅，无法解决大批粮食的运输，只得作罢。而明成祖之所以能迁都北京，南北大运河的存在是决定因素之一。<blockquote>
<p>但运河的自然地理条件也决定了它同样存在着的先天不足：由南到北要越过海拔 40 米左右的山东，而这一带恰恰是水量不足的地方，天气稍旱，就会出现运河与当地农业生产争水的现象，而为了确保运河的畅通，明清统治者都采取弃农保运的方针，往往连山泉的水都得引入运河，向北京运粮食的船队不过，周围的水源就绝不能动用。运河还得穿过黄河，而黄河又经常闹水灾，决口改道也多次发生。治黄和保运往往有矛盾，在这种情况下，为了保证运河的畅通，统治者宁可暂停黄河堵口和恢复故道的工作，或者听任水患延续。</p>
</blockquote>
</li>
<li>刘向的《列女传》中尽管也有不少后世所谓的“贞节烈女”，但“列”字在他那里的本意只是“诸”“众”之意，犹如《列仙传》《列国志》，是各类有影响的或值得记载的妇女的传记，只要才行高秀者均可收入。而到了后世，“列”字完成成了“烈”的通假字，专指“节烈”之意，贞节与否居了入选的唯一标准，《列女传》演变成了《“烈”女传》。尤其明清以后不计其数的续修《列女传》以及正史、方志中的《列女传》，千篇一律，无不如此。我们在阅读这类史料时必须注意，正因为贞节烈女太少，统治者才会大力提倡，这和鲁迅在《我们现在怎样做父亲》一文中说的：“历来都竭力表彰‘五世同堂’，便足见实际上同居的为难；拼命的劝孝，也足见事实上孝子的缺少。”都是一样的道理。</li>
<li>晚明以来，一方面是充斥于正史、方志中无数贞节烈女的事迹，另一方面，却涌现了大量以情欲为主题的市井小说，专以叙床第之事为能事，这正反映了晚明男女关系渐趋松弛，人性觉醒，世风为之一巨变。这与西方历史上的“文艺复兴”时代颇有类似之处，后者常为中国的历史著作倍加赞誉，而前者却被贬为“亡国之相”，不如何以厚此薄彼如此？</li>
<li>唐安史之乱爆发后，太监李辅国因拥立肃宗继位有功，被任命为兵部尚书，从此宦官掌军几乎成为惯例。由于十余万神策军（中央禁军）和大部分藩镇的兵权都掌握在太监手中，反而是皇帝一旦得罪了太监，即或囚或废，甚至连皇帝的性命也会难保。唐中后期几乎所有皇帝均为宦官拥立，顺宗、宪宗、敬宗、文宗都是由于试图打击太监势力而被杀。</li>
<li>元朝是蒙古族入主中原而建立的，实行民族歧视政策，将各民族分为四等：蒙古、色目、汉人、南人，从法律上明确规定前两类人在政治、经济上的优越地位。蒙古尚武轻文，建国后长期废止科举考试，汉族文人（特别是北方原金朝统治区的）丧失了进身之阶，地位一落千丈，几乎处于社会最底层，故有“九儒十丐”之说。他们看不到前途和希望，带着对社会的满腔怨恨投入杂剧创作当中，目前存世的元人杂剧，几乎全是汉人创作的。</li>
<li>《金瓶梅》一书最为前人诟病的是其中夹杂的大量性描写，被贬为“天下第一淫书”，其实这样的描写在当时却是一种风尚，文人士子并不以谈性为耻，鲁迅便说：“自方士进用以来，方药盛，妖心兴，而小说亦多神魔之谈，且每叙床第之事也。然《金瓶梅》作者能文，故虽间杂猥词，而其佳处自在。”</li>
<li>按照中国的历史传统，即使连皇帝本人，也是无权阅读当朝的<strong>起居注</strong>的。据说古代史官应该将皇帝的言行和活动随时记录下来，投入一个密封的容器，等皇帝死了，才能由专人打开，取了记录作为修史的根据。史官的记载不是给皇帝看的，而是留给后人修史用的。<blockquote>
<p>像宋太宗这样的人物，在历史上算得上开明的君主，他对历史毕竟还多少怀有一定的畏惧，不时检点自己的言行，尊重史官的独立性。面历史上另一些暴君、权臣，则完全依靠政治强权来迫使历史符合自己的意愿。</p>
<p>前秦国主<strong>苻坚</strong>，其生母苟太后与将军李威有私，苻坚为掩盖这段宫廷丑闻，不顾制度调阅了起居注和有关簿记，其中果然有苟太后与李威隐秘关系的记录，他恼羞成怒，将这些原始材料全部焚毁。而执笔史官均已去世，事情才就此作罢。</p>
<p>东晋孙盛所作《晋阳秋》一书中，如实记载了桓温北伐为前燕大败之事，桓温阅后大为恼怒，强令孙盛修改，孙盛誓死不从，后来是他儿子私自修改才了事。幸亏孙盛事先已将《晋阳秋》誊抄了两部寄到前燕，后人才知道这段历史的真相。</p>
</blockquote>
</li>
<li>本来按照周朝的制度，各诸侯国每年都必须到国都朝觐周天子并进贡各地方物，但到了春秋末年，王室衰微，周天子根本不被各诸侯放在眼里，反而要去参加诸侯的会盟。</li>
<li>道教中常见某人服仙丹白日羽化升天之事，实际上均是汞、砷、铅等重金属急性中毒而导致的迅速死亡。但英国著名科学史家李约瑟博士在其巨著《中国科学技术史》中就对道士炼丹活动给予了高度评价，认为中国的炼丹术通过阿拉伯人传到西方世界，发展为炼金术，成为近代化学的起源。在欧洲历史上产生了翻天覆地变化的火药，也是中国道士在炼丹过程中偶然发明的。</li>
<li>海瑞死时仅留下白银 20 两，尚不够殓葬的费用，可见官员们靠正常收是无法维持生活的。有的朝代还委任一些只有空衔不支俸禄的地方官，听任他们去“自负盈亏”，这样就造成了无官不贪的局面。平心而论，海瑞的廉洁自律，确实值得敬仰，但用如此崇高的道德规范来要求每一个官员，根本是不可能做到的。海瑞是宋明理学的坚定信仰者和实践者，在这点上，他确实是表里如一的，但其行事往往极端偏激而毫不近人情：明姚叔祥曾记载，海瑞年仅 5 岁的女儿，仅仅因为从男性家僮手中接了一块饼吃，便被海瑞认为犯了“男女授受不亲”不大防，强逼其自行饿死。</li>
<li>在中国的七大古都中，安阳建都在杭州之前，年代比杭州久；开封也先于杭州，地位更加重要，但国内外知道杭州的人无疑要比知道开封、安阳的多得多。像杭州的“宋城”主题公园，全是新建的仿古建筑，游客也源源不绝。而杭州城南凤凰山麓真正的南宋皇城遗址却堙没于草木之间，到那里去发思古之幽情的恐怕没有几个。</li>
<li>要了解魏晋风度就离不开《世说新语》的记载。</li>
<li>毛泽东晚年很多做法，他都要在历史中找根据，而与中国实际越来越脱离。1958 年，中共八届六中全会通过《关于人民公社若干问题的决议》，毛泽东将《三国志-张鲁传》亲自作注，印发与会者。他对张鲁的五斗米道实行的“置义舍”（免费住宿）、“置义米肉”（吃饭不要钱）等措施极为欣赏，在批语中认为“现在的人民公社运动，是有我国的历史来源的”，以此作为“大跃进”和“人民公社化”运动的历史依据，终于酿成历史的惨剧。毛泽东研究专家，曾任毛泽东秘书的李锐对此有过切中肯綮(qìng)的评价：“毛泽东对中国传统文化最有兴趣，涉猎最广的是史书。他一生酷好读史，到老不衰。除常看卷帙浩繁的《资治通鉴》外，即使是专治史学的专家也未必人人通读过的《二十四史》，也基本读遍了。至于稗官野史，他更是兴趣极浓，熟悉之至。”（《毛泽东晚年错误思想形成的原因》，见《直言：李锐六十年的忧与思》，今日中国出版社 1998 年）但“他既有十分高远的想象，又有丰富的历史素养，独独缺少对人类（原文按，主要是西方资本主义）经济发展普遍规律的了解，其中有为马克思所总结过的，也有马克思以后 100 多年尤其是二次大战后新发展的，他都不熟悉，或者茫然无知；同时又违背革命年代自己的经验，急于求成，不是脚踏中国实际，用科学的实事求是的态度探索落后国家社会主义建设规律，终于造成了晚年的悲剧。”（《“大跃进”失败的教训何在》，同上）</li>
<li>中国的三门峡水库由于无法解决的泥沙问题，建成不久即壅塞报废。</li>
<li>大凡在社会大变革时期，一方面许多人通过不正当的手段攫取了大量的社会财富和政治利益，另一方面，旧体制下的既得利益者出于利益丧失，对社会现状产生不满。</li>
<li>经济增长多半是由政府投资带动的，政府的大量投资可能造成财政赤字，往往就要依靠增发货币弥补，于是造成物价上涨。一般而言，高的经济增长率就会导致高的通货膨胀率。所以越是经济落后的地区，物价就越是出奇地低。</li>
<li>玄武门之变后，唐高祖随即颁布诏令，以世民为太子，建成、元吉的十个儿子均以谋反罪名处死，两个月后，又宣布退位为太上皇，李世民登基。</li>
<li>隋仁寿四年（604），隋文帝次子杨广发动宫廷政变，杀死其父杨坚和其兄杨勇自立，留在史书上的隋炀帝形象，是一个荒淫无耻、灭绝人伦的暴君，而导演了一场类似宫廷政变的李世民，却是大唐帝国的缔造者，是历史上少有的明君。之所以会有如此巨大的差别，就在于杨广上台后横征暴敛、诛杀功臣、穷兵黩武，不久即身死国灭，被后世视为亡国之君的典型，而李世民则能吸取历史的教训，任命包括原建成亲信魏征在内的一大批名臣，开创盛唐的“贞观之治”，自然可以从容地修改国史。</li>
<li>唐太宗晚年因其诸子争夺储位而极其苦恼，甚至当着大臣的面“抽佩刀欲自刺”，就是他自己种下的恶果。</li>
<li>整个唐朝都拥有今天越南的一部分，而当时青藏高原上的吐蕃却是唐朝的对手。</li>
<li>王莽深受儒家“夷夏之辨”的影响，对边疆少数民族政治采取了一系列错误政策。他胁迫羌人“献”出青海湖一带的土地设立西海郡，以便与国内已有的北海郡（国）、南海郡、东海郡合起来凑全“四海”。为了使这块荒地像一个郡，必须强制移民，于是增加了五十条法令，以便增加成千上万的罪犯，满足移民的需要。</li>
</ol>
]]></content>
      <categories>
        <category>历史</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>在远程服务器中使用mayavi渲染三维图——借助jupyter notebook</title>
    <url>/blog/2021/02/01/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E4%BD%BF%E7%94%A8mayavi%E6%B8%B2%E6%9F%93%E4%B8%89%E7%BB%B4%E5%9B%BE%E2%80%94%E2%80%94%E5%80%9F%E5%8A%A9jupyter-notebook/</url>
    <content><![CDATA[<p>mayavi 库基于 opengl 绘制三维图，似乎凡是通过 opengl 调用 GPU 进行图像渲染的相关功能在远程连接中都无法使用，SSH 与 linux 的连接如是，win10 的远程桌面连接亦如是，曾经在 2020 年寒假使用服务器工作时深受其害，至 2021 年寒假竟然碰巧发现一些窍门可以正常使用 mayavi 了。</p>
<blockquote>
<p>注：本文说的“远程正常使用 mayavi”指其能正常渲染展示 3D 图（使用鼠标可以拖动至各个视角查看），如果只是希望能够保存 mayavi 绘制出的图片为 png 文件，不需要前台的 3D 展示，参考另一篇<a href="https://www.chua-n.com/2020/12/07/mayavi离屏渲染/">博文</a>。</p>
</blockquote>
<span id="more"></span>
<h2 id="1-一般情况下的报错"><a href="#1-一般情况下的报错" class="headerlink" title="1. 一般情况下的报错"></a>1. 一般情况下的报错</h2><p>若不进行任何操作，在 ssh 连接下的服务器命令行中，进入 python 其至都无法导入 mayavi 的 mlab，更别提绘图了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chuan@zwgroup-1080ti:~/soil$ python</span><br><span class="line">Python 3.7.9 (default, Aug 31 2020, 12:42:55)</span><br><span class="line">[GCC 7.3.0] :: Anaconda, Inc. on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; from mayavi import mlab</span><br><span class="line">qt.qpa.xcb: could not connect to display</span><br><span class="line">qt.qpa.plugin: Could not load the Qt platform plugin <span class="string">&quot;xcb&quot;</span> <span class="keyword">in</span> <span class="string">&quot;&quot;</span> even though it was found.</span><br><span class="line">This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.</span><br><span class="line"></span><br><span class="line">Available platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, wayland-egl, wayland, wayland-xcomposite-egl, wayland-xcomposite-glx, webgl, xcb.</span><br><span class="line"></span><br><span class="line">已放弃 (核心已转储)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注 1：mayavi 的 mlab，会在几乎每一次调用时都创建一个“python 图形化进程”，包括在 import 引入 mlab 的语句中，远程无法调用 openGL 绘图，故而报错。</p>
<p>注 2：另一种类似的情况是，也许你在本地服务器上运行 python 脚本，但你服务器没有显示器，此时情况同上。mayavi 无法连接 X 服务（和 OpenGL 的关系尚不清楚？），尽管你想不<code>mlab.show()</code>出来你的图形，希望使用<code>mlab.savefig()</code>命令将绘制出的图形保存成.png 格式后，传回个人电脑上再进行查看，但是会出现同样的报错。</p>
</blockquote>
<p>也在 mayavi 官方文档<a href="http://docs.enthought.com/mayavi/mayavi/tips.html?highlight=offscreen">这里</a>尝试了很多解决方案，但无甚效果。</p>
<p>即使使用 jupyter notebook 导入 mlab，也会把其服务搞挂掉：</p>
<p><img src="https://chua-n.gitee.io/figure-bed/blog/远程连接使用mayavi渲染三维图——借助jupyter-notebook/jupyter挂掉.png" alt="jupyter挂掉"></p>
<h2 id="2-解决方案-1"><a href="#2-解决方案-1" class="headerlink" title="2. 解决方案 1"></a>2. 解决方案 1</h2><p>巧合的是，离校前我在服务器的主机上就地操作时，开启了一个 tmux 终端服务(见<a href="https://www.chua-n.com/2021/01/15/常用linux命令杂记/">常用 linux 命令杂记</a>)，在这个 tmux 终端中我意外开启了 jupyter-notebook 服务，jupyter 竟然能正常渲染出 mayavi 的三维图了！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuan@zwgroup-1080ti:~/soil$ jupyter-notebook</span><br><span class="line">[I 20:09:54.166 NotebookApp] 启动notebooks 在本地路径: /home/chuan/soil</span><br><span class="line">[I 20:09:54.166 NotebookApp] Jupyter Notebook 6.1.5 is running at:</span><br><span class="line">[I 20:09:54.166 NotebookApp] http://[ipAddress]:8888/</span><br></pre></td></tr></table></figure>
<p><img src="https://chua-n.gitee.io/figure-bed/blog/远程连接使用mayavi渲染三维图——借助jupyter-notebook/jupyter成功使用mayavi.png" alt="jupyter成功使用mayavi"></p>
<p>但这个 tmux 终端是我在服务器主机上本地开启的，现在我在远程连接中再开一个新的 tmux 终端并开启 jupyter-notebook 服务时，导入 mlab 依然会挂掉 jupyter 服务。因而推测：<strong>在远程连接中调用一些系统命令时，跟在本地调用相同命令时被系统授予的权限是不同的</strong>，尽管我可以在远程连接中新开一个 tmux，但这个 tmux 没有权限连接 X 服务（无法渲染基于 opengl 的 3D 图像），而本地开启的 tmux 则拥有相关权限。</p>
<p>因此，若希望在远程中仍然可以正常使用 mayavi，在离开服务前先在服务器中开启一个 tmux 终端服务吧，不妨将它命名为“mayavi”，然后等需要的时候在其中开启 jupyter 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new -n mayavi  <span class="comment"># 需在服务器本机上输入这条命令</span></span><br><span class="line">jupyter-notebook  <span class="comment"># 无所谓何时开启Jupyter服务</span></span><br></pre></td></tr></table></figure>
<p>那么如果我无法去到服务器所在地，无法开启所需的 tmux 终端呢？那就试试<a href="#jump">方案 2</a> 吧。</p>
<h2 id="3-解决方案-2"><a href="#3-解决方案-2" class="headerlink" title="3. 解决方案 2"></a><span id="jump">3. 解决方案 2</span></h2><p>此方案实际是 mayavi 离屏渲染方法的一体两面，参见<a href="https://www.chua-n.com/2020/12/07/mayavi离屏渲染/">此篇博文</a>创建一个 <code>mayaviOffScreen.mlab</code> 代替你需要的 <code>mayavi.mlab</code> 吧：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Render the mayavi scene off screen.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">When you don&#x27;t need display the mayavi scene while running python scripts,</span></span><br><span class="line"><span class="string">importing `mlab` from this module is recommended, i.e.,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from mayaviOffScreen imoprt mlab</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Notes:</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">    1. If you are using mayavi from remote host by SSH, etc, you must</span></span><br><span class="line"><span class="string">        import `mlab` from this module. Or something wrong happens!</span></span><br><span class="line"><span class="string">    2. Under the circumstance above, if you need import some other modules meanwhile</span></span><br><span class="line"><span class="string">        and those modules import `mlab` as well in themselves, make sure the sentence</span></span><br><span class="line"><span class="string">        `from mayaviOffScreen import mlab` appears before `import otherModule`!</span></span><br><span class="line"><span class="string">        So that `mayaviOffScreen.mlab` covers `otherModule.mlab`.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</span><br><span class="line"></span><br><span class="line">display = Display(visible=<span class="literal">False</span>, size=(<span class="number">1280</span>, <span class="number">1024</span>))</span><br><span class="line">display.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mayavi <span class="keyword">import</span> mlab</span><br><span class="line">mlab.options.offscreen = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Set mlab.options.offscreen=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(mlab.options.offscreen))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因为即使把 mayavi 的离屏渲染功能打开，jupyter 仍然会捕捉到 mayavi 的图像，于是，只要把方案 1 中的第一句<code>from mayavi import mlab</code>替换为<code>from mayaviOffScreen import mlab</code>便可以像方案 1 一样在 jupyter 中正常渲染 mayavi 图形。</p>
]]></content>
      <categories>
        <category>python</category>
        <category>jupyter</category>
        <category>mayavi</category>
      </categories>
  </entry>
  <entry>
    <title>逆变换采样</title>
    <url>/blog/2020/05/17/%E9%80%86%E5%8F%98%E6%8D%A2%E9%87%87%E6%A0%B7/</url>
    <content><![CDATA[<p>一般的编程语言都具有（伪）随机数生成功能，如 python 的<code>random.random()</code>函数，然而它们通常只对应均匀分布。那如果想生成符合任意概率分布的随机数，该如何在代码上实现呢？这就可以用到“逆变换采样”了。</p>
<span id="more"></span>
<h2 id="1-引理"><a href="#1-引理" class="headerlink" title="1. 引理"></a>1. 引理</h2><p>假设$X$为一个连续随机变量，其累积分布函数为$CDF(x)=P(X \le x)$，若随机变量$Y=CDF(X)$，则$Y$服从区间$[0, 1]$上的均匀分布。</p>
<blockquote>
<p><strong>证明</strong>：已知：$CDF(x) \in [0, 1]$，且$CDF(x)$为单调递增函数。</p>
<script type="math/tex; mode=display">
\forall \; y < 0, \qquad P(Y \le y)=P(CDF(X) \le y)=0</script><script type="math/tex; mode=display">
\begin{aligned}
\forall \; 0 \le y \le 1,\qquad P(Y \le y) &= P(CDF(X)\le y) \\
&= P(X\le CDF^{-1}(y)) \\
&= P(X\le x) \\
&= CDF(x) \\
&= y
\end{aligned}</script><script type="math/tex; mode=display">
\forall \; y > 1, \qquad P(Y\le y) = P(CDF(X) \le y) = 1</script><p>综上，$Y$服从区间$[0,1]$上的均匀分布。</p>
</blockquote>
<h2 id="2-推论：逆变换采样"><a href="#2-推论：逆变换采样" class="headerlink" title="2. 推论：逆变换采样"></a>2. 推论：逆变换采样</h2><p>假设$X$为一个连续随机变量，其累积分布函数为$CDF(x)=P(X \le x)$，则随机变量$Y=CDF(X)$服从区间$[0, 1]$上的均匀分布。<strong>逆变换采样</strong>即是将该过程反过来进行：</p>
<ol>
<li>首先对于随机变量$Y$，我们从$[0,1]$中随机均匀抽取一个数$y$；</li>
<li>由于$X=CDF^{-1}(Y)$，可求得随机数$x=CDF^{-1}(y)$，故$x$即可看作是从分布$CDF(X)$中生成的随机样本。</li>
</ol>
<h2 id="3-联想"><a href="#3-联想" class="headerlink" title="3. 联想"></a>3. 联想</h2><p>突然想到一个疑问，似乎概率论课堂中有讲过但是一时又无法想出解答，暂记如下：</p>
<p><strong>问题</strong>：设有连续随机变量$X$与$Y$，已知$X$的概率密度为$p_1(x)$，且$X$与$Y$有如下关系：</p>
<script type="math/tex; mode=display">y=f(x)</script><p>那么$Y$的概率密度$p_2(y)$可如何表示？</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率</category>
      </categories>
      <tags>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>配置jupyter notebook远程连接服务</title>
    <url>/blog/2020/12/08/%E9%85%8D%E7%BD%AEjupyter%20notebook%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>jupyter notebook 不仅可在本地进行连接，而且可以在远程主机上开启 jupyter notebook 服务，然后在本地进行连接以便使用服务器的资源。</p>
<span id="more"></span>
<h2 id="1-安装-jupyter-notebook"><a href="#1-安装-jupyter-notebook" class="headerlink" title="1. 安装 jupyter notebook"></a>1. 安装 jupyter notebook</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure>
<h2 id="2-生成相关配置文件"><a href="#2-生成相关配置文件" class="headerlink" title="2. 生成相关配置文件"></a>2. 生成相关配置文件</h2><p>在命令行中运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<h2 id="3-设置连接-jupyter-notebook-服务时的密码"><a href="#3-设置连接-jupyter-notebook-服务时的密码" class="headerlink" title="3. 设置连接 jupyter notebook 服务时的密码"></a>3. 设置连接 jupyter notebook 服务时的密码</h2><p>在命令行中进入 IPython 进行如下操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">In [<span class="number">2</span>]: passwd()</span><br><span class="line">Enter password:</span><br><span class="line">Verify password:</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;sha1:***yourcode***&#x27;</span></span><br></pre></td></tr></table></figure>
<p>复制上面 Out[2]: 出来的密文，即引号中的内容，后续会用到。</p>
<h2 id="4-在上面生成的配置文件中进行配置"><a href="#4-在上面生成的配置文件中进行配置" class="headerlink" title="4. 在上面生成的配置文件中进行配置"></a>4. 在上面生成的配置文件中进行配置</h2><p>这里我们通过在 vim 编辑器中进行设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>
<p>在上面文件的最后面插入以下设置，其含义见注释即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip = <span class="string">&#x27;0.0.0.0&#x27;</span>  <span class="comment"># 所有IP都可以访问</span></span><br><span class="line">c.NotebookApp.port = 8888  <span class="comment"># 默认的端口是8888</span></span><br><span class="line"><span class="comment"># 禁止自动在服务器上打开jupyter</span></span><br><span class="line"><span class="comment"># 若不设置此选项，则在命令行中输入`jupyter notebook`时会自动打开你的浏览器连接刚刚开启的jupyter服务</span></span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line"><span class="comment"># 将之前复制的密文复制到这里</span></span><br><span class="line"><span class="comment"># 测试了一下，如不设置此选项，在浏览器中连接时会出现异常，虽然也提示你输入密码，但是就是无法连接成功</span></span><br><span class="line">c.NotebookApp.password = u<span class="string">&#x27;sha1:***yourcode***&#x27;</span></span><br><span class="line"><span class="comment"># 设置启动Jupyter后其工作的根目录</span></span><br><span class="line"><span class="comment"># 该文件夹需要你自己去创建，我设置的为我在我的家目录中创建的jupyter文件夹</span></span><br><span class="line"><span class="comment"># 若不设置此项，打开jupyter时的工作目录为你在命令行输入jupyter notebook命令时对应的目录</span></span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">&quot;/path_of/root_directory/where/jupyter/works/&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-启动-jupyter-notebook"><a href="#5-启动-jupyter-notebook" class="headerlink" title="5. 启动 jupyter notebook"></a>5. 启动 jupyter notebook</h2><p>在终端中输入<code>jupyter notebook</code>即可，此时可在本地或者远程连接此 jupyter notebook 服务。</p>
<h2 id="6-远程连接"><a href="#6-远程连接" class="headerlink" title="6. 远程连接"></a>6. 远程连接</h2><p>在你的本地浏览器中，输入地址名<code>http://hostIpAddress:8888</code>（其中 hostIpAddress 以你主机的 IP 地址进行替换），输入登陆密码即可连接。</p>
]]></content>
      <categories>
        <category>python</category>
        <category>linux</category>
        <category>jupyter</category>
      </categories>
  </entry>
</search>
